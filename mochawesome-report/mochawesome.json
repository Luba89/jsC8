{
  "stats": {
    "suites": 34,
    "tests": 18,
    "passes": 17,
    "pending": 1,
    "failures": 0,
    "start": "2020-08-03T12:25:58.676Z",
    "end": "2020-08-03T12:25:58.778Z",
    "duration": 102,
    "testsRegistered": 216,
    "passPercent": 7.906976744186046,
    "pendingPercent": 0.4629629629629629,
    "other": 37,
    "hasOther": true,
    "skipped": 198,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "6a6e0ddb-2e9d-4528-a3e5-0ed44d26c404",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "63f7dc0b-2069-487d-9d83-517cf4d1d181",
          "title": "Creating a Fabric",
          "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/00-basics.js",
          "file": "/lib/async/test/00-basics.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "02ef92d5-f493-43f9-8c1b-ec84b00937aa",
              "title": "using the factory",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/00-basics.js",
              "file": "/lib/async/test/00-basics.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns a Fabric instance",
                  "fullTitle": "Creating a Fabric using the factory returns a Fabric instance",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(fabric).to.be.an.instanceof(jsC8_1.Fabric);",
                  "err": {},
                  "uuid": "e1429490-ab36-4008-806b-841085215713",
                  "parentUUID": "02ef92d5-f493-43f9-8c1b-ec84b00937aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "passes any configs to the connection",
                  "fullTitle": "Creating a Fabric using the factory passes any configs to the connection",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(fabric._connection).to.have.property(\"_c8Version\", 54321);",
                  "err": {},
                  "uuid": "9997ae37-1f75-417a-b112-cbbda8fb7419",
                  "parentUUID": "02ef92d5-f493-43f9-8c1b-ec84b00937aa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e1429490-ab36-4008-806b-841085215713",
                "9997ae37-1f75-417a-b112-cbbda8fb7419"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "3c618076-26cc-4c60-bdd1-0128a2bef28b",
              "title": "using the constructor",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/00-basics.js",
              "file": "/lib/async/test/00-basics.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns a Fabric instance",
                  "fullTitle": "Creating a Fabric using the constructor returns a Fabric instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(fabric).to.be.an.instanceof(jsC8_1.Fabric);",
                  "err": {},
                  "uuid": "93e49d44-e387-45d1-9a9d-e92844759291",
                  "parentUUID": "3c618076-26cc-4c60-bdd1-0128a2bef28b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "passes any configs to the connection",
                  "fullTitle": "Creating a Fabric using the constructor passes any configs to the connection",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(fabric._connection).to.have.property(\"_c8Version\", 43210);",
                  "err": {},
                  "uuid": "d416b606-6eaf-4b89-a42c-3c520ee299cb",
                  "parentUUID": "3c618076-26cc-4c60-bdd1-0128a2bef28b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "93e49d44-e387-45d1-9a9d-e92844759291",
                "d416b606-6eaf-4b89-a42c-3c520ee299cb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "6e56ec98-207b-40a0-882b-fa20f4aa464e",
          "title": "Configuring the driver",
          "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/00-basics.js",
          "file": "/lib/async/test/00-basics.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "74675f47-9b47-4708-be40-4eabe3dfb868",
              "title": "with a string",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/00-basics.js",
              "file": "/lib/async/test/00-basics.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sets the url",
                  "fullTitle": "Configuring the driver with a string sets the url",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "24a2543c-6904-4e03-8cb1-854908937707",
                  "parentUUID": "74675f47-9b47-4708-be40-4eabe3dfb868",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "24a2543c-6904-4e03-8cb1-854908937707"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "e48368f3-9507-4da7-a3a1-8581d69bfb7a",
              "title": "with headers",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/00-basics.js",
              "file": "/lib/async/test/00-basics.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "applies the headers",
                  "fullTitle": "Configuring the driver with headers applies the headers",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const conn = new connection_1.Connection({\n    headers: {\n        \"x-one\": \"1\",\n        \"x-two\": \"2\"\n    }\n});\nconn._hosts = [\n    ({ headers }) => {\n        chai_1.expect(headers).to.have.property(\"x-one\", \"1\");\n        chai_1.expect(headers).to.have.property(\"x-two\", \"2\");\n        done();\n    }\n];\nconn.request({ headers: {} }, () => { });",
                  "err": {},
                  "uuid": "aa975f48-b09d-4094-b018-74965b41510f",
                  "parentUUID": "e48368f3-9507-4da7-a3a1-8581d69bfb7a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aa975f48-b09d-4094-b018-74965b41510f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "0d7c9789-4d47-4548-a518-690f9d17a5f6",
              "title": "with an c8Version",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/00-basics.js",
              "file": "/lib/async/test/00-basics.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sets the x-c8-version header",
                  "fullTitle": "Configuring the driver with an c8Version sets the x-c8-version header",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const conn = new connection_1.Connection({ c8Version: 99999 });\nconn._hosts = [\n    ({ headers }) => {\n        chai_1.expect(headers).to.have.property(\"x-c8-version\", \"99999\");\n        done();\n    }\n];\nconn.request({ headers: {} }, () => { });",
                  "err": {},
                  "uuid": "9552516a-6c25-41df-ae04-12114cfacc6a",
                  "parentUUID": "0d7c9789-4d47-4548-a518-690f9d17a5f6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9552516a-6c25-41df-ae04-12114cfacc6a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "9f9f7073-45c1-49c2-9005-ab43227f8815",
              "title": "with agentOptions",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/00-basics.js",
              "file": "/lib/async/test/00-basics.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook",
                  "fullTitle": "Configuring the driver with agentOptions \"before all\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let Agent = (ptcl) => function (opts) {\n    protocol = ptcl;\n    options = opts;\n    return () => null;\n};\nhttp.Agent = Agent(\"http\");\nhttps.Agent = Agent(\"https\");",
                  "err": {},
                  "uuid": "64cde834-815b-43da-8791-625893223f91",
                  "parentUUID": "9f9f7073-45c1-49c2-9005-ab43227f8815",
                  "isHook": true,
                  "skipped": false
                },
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Configuring the driver with agentOptions \"before each\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "protocol = undefined;\noptions = undefined;",
                  "err": {},
                  "uuid": "47938fa1-af33-42e5-81c6-5e75577d957e",
                  "parentUUID": "9f9f7073-45c1-49c2-9005-ab43227f8815",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook",
                  "fullTitle": "Configuring the driver with agentOptions \"after all\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "http.Agent = _httpAgent;\nhttps.Agent = _httpsAgent;",
                  "err": {},
                  "uuid": "a40e9f77-b763-4e60-af77-8d32975cec09",
                  "parentUUID": "9f9f7073-45c1-49c2-9005-ab43227f8815",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "passes the agentOptions to the agent",
                  "fullTitle": "Configuring the driver with agentOptions passes the agentOptions to the agent",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "new connection_1.Connection({ agentOptions: { hello: \"world\" } }); // eslint-disable-line no-new\nchai_1.expect(options).to.have.property(\"hello\", \"world\");",
                  "err": {},
                  "uuid": "ca5df35d-9013-444c-ac30-762fdd7792b1",
                  "parentUUID": "9f9f7073-45c1-49c2-9005-ab43227f8815",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "uses the built-in agent for the protocol",
                  "fullTitle": "Configuring the driver with agentOptions uses the built-in agent for the protocol",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// default: http\nnew connection_1.Connection(); // eslint-disable-line no-new\n// expect(protocol).to.equal(\"http\");\nnew connection_1.Connection(\"https://test.macrometa.io\"); // eslint-disable-line no-new\nchai_1.expect(protocol).to.equal(\"https\");",
                  "err": {},
                  "uuid": "7113358e-ecaf-445e-9c4e-15fd3f338c32",
                  "parentUUID": "9f9f7073-45c1-49c2-9005-ab43227f8815",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ca5df35d-9013-444c-ac30-762fdd7792b1",
                "7113358e-ecaf-445e-9c4e-15fd3f338c32"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "9ab237a8-20fb-4755-a302-ffbf824ac95e",
              "title": "with agent",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/00-basics.js",
              "file": "/lib/async/test/00-basics.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook",
                  "fullTitle": "Configuring the driver with agent \"before all\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let Request = (ptcl) => (opts) => {\n    protocol = ptcl;\n    options = opts;\n    return {\n        on() {\n            return this;\n        },\n        end() {\n            return this;\n        }\n    };\n};\nhttp.request = Request(\"http\");\nhttps.request = Request(\"https\");",
                  "err": {},
                  "uuid": "a2c5e45c-0fda-416f-8f37-6d18ba5915d8",
                  "parentUUID": "9ab237a8-20fb-4755-a302-ffbf824ac95e",
                  "isHook": true,
                  "skipped": false
                },
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Configuring the driver with agent \"before each\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "protocol = undefined;\noptions = undefined;",
                  "err": {},
                  "uuid": "dfb02780-7c3e-4a13-bdbe-49ab4db5fcea",
                  "parentUUID": "9ab237a8-20fb-4755-a302-ffbf824ac95e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook",
                  "fullTitle": "Configuring the driver with agent \"after all\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "http.request = _httpRequest;\nhttps.request = _httpsRequest;",
                  "err": {},
                  "uuid": "3dbf0d16-8d09-4d1c-b739-c4151e6fe74d",
                  "parentUUID": "9ab237a8-20fb-4755-a302-ffbf824ac95e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "passes the agent to the request function",
                  "fullTitle": "Configuring the driver with agent passes the agent to the request function",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let agent = Symbol(\"agent\");\nlet conn;\nconn = new connection_1.Connection({ agent }); // default: https\nconn.request({ headers: {} }, () => { });\nchai_1.expect(options).to.have.property(\"agent\", agent);\nagent = Symbol(\"agent\");\nconn = new connection_1.Connection({ agent, url: \"https://test.macrometa.io\" });\nconn.request({ headers: {} }, () => { });\nchai_1.expect(options).to.have.property(\"agent\", agent);",
                  "err": {},
                  "uuid": "55232015-2613-4dc7-a4aa-f8257d998bc9",
                  "parentUUID": "9ab237a8-20fb-4755-a302-ffbf824ac95e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "uses the request function for the protocol",
                  "fullTitle": "Configuring the driver with agent uses the request function for the protocol",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const agent = Symbol(\"agent\");\nlet conn;\nconn = new connection_1.Connection({ agent }); // default: http\nconn.request({ headers: {} }, () => { });\nchai_1.expect(protocol).to.equal(\"https\");\nconn = new connection_1.Connection({ agent, url: \"https://test.macrometa.io\" });\nconn.request({ headers: {} }, () => { });\nchai_1.expect(protocol).to.equal(\"https\");",
                  "err": {},
                  "uuid": "190990ca-de6b-4371-966e-e2ba42b4823c",
                  "parentUUID": "9ab237a8-20fb-4755-a302-ffbf824ac95e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calls Agent#destroy when the connection is closed",
                  "fullTitle": "Configuring the driver with agent calls Agent#destroy when the connection is closed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const agent = {\n    _destroyed: false,\n    destroy() {\n        this._destroyed = true;\n    }\n};\nconst conn = new connection_1.Connection({ agent });\nchai_1.expect(agent._destroyed).to.equal(false);\nconn.close();\nchai_1.expect(agent._destroyed).to.equal(true);",
                  "err": {},
                  "uuid": "1333cae5-3b8c-4fd7-b2b8-f783a9a657b7",
                  "parentUUID": "9ab237a8-20fb-4755-a302-ffbf824ac95e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "55232015-2613-4dc7-a4aa-f8257d998bc9",
                "190990ca-de6b-4371-966e-e2ba42b4823c",
                "1333cae5-3b8c-4fd7-b2b8-f783a9a657b7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "6e89b716-f8ef-47a6-952e-27c45cf1a048",
          "title": "Manipulating fabrics",
          "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/01-manipulating-fabrics.js",
          "file": "/lib/async/test/01-manipulating-fabrics.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Manipulating fabrics \"before all\" hook",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "fabric = new jsC8_1.Fabric({\n    url: testUrl,\n    c8Version: C8_VERSION\n});\nawait fabric.login(\"guest@macrometa.io\", \"guest\");\nfabric.useTenant(\"guest\");\nconst response = await fabric.getAllEdgeLocations();\ndcList = helper_1.getDCListString(response);",
              "err": {
                "message": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443",
                "estack": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:57:26)",
                "diff": null
              },
              "uuid": "58372be3-83c0-4acd-b72f-5bce1b5d29d7",
              "parentUUID": "6e89b716-f8ef-47a6-952e-27c45cf1a048",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before all\" hook",
              "fullTitle": "Manipulating fabrics \"before all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fabric2 = new jsC8_1.Fabric({\n    url: testUrl\n});\nawait fabric2.login(\"guest@macrometa.io\", \"guest\");\nfabric2.useTenant(\"guest\");\ncollection = fabric2.collection(collectionName);\nawait collection.create();",
              "err": {},
              "uuid": "a25cc5b3-f06f-4b49-808d-ad7f21aff559",
              "parentUUID": "6e89b716-f8ef-47a6-952e-27c45cf1a048",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "Manipulating fabrics \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "fabric = new jsC8_1.Fabric({\n    url: testUrl,\n    c8Version: C8_VERSION\n});\nawait fabric.login(\"guest@macrometa.io\", \"guest\");\nfabric.useTenant(\"guest\");\nconst response = await fabric.getAllEdgeLocations();\ndcList = helper_1.getDCListString(response);",
              "err": {},
              "uuid": "c92023a1-c027-4ae7-8410-612497fed684",
              "parentUUID": "6e89b716-f8ef-47a6-952e-27c45cf1a048",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "Manipulating fabrics \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "fabric.useFabric(\"_system\")",
              "err": {},
              "uuid": "29c18850-04c8-40e5-b557-0d1a0efd5971",
              "parentUUID": "6e89b716-f8ef-47a6-952e-27c45cf1a048",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "Manipulating fabrics \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "fabric.close();",
              "err": {},
              "uuid": "0d76680e-aed1-460c-a930-0e8dd8377d01",
              "parentUUID": "6e89b716-f8ef-47a6-952e-27c45cf1a048",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after all\" hook",
              "fullTitle": "Manipulating fabrics \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await collection.drop();",
              "err": {
                "message": "TypeError: Cannot read property 'drop' of undefined",
                "estack": "TypeError: Cannot read property 'drop' of undefined\n    at Context.afterAll (src/test/01-manipulating-fabrics.ts:260:24)",
                "diff": null
              },
              "uuid": "a5185d8d-e442-44a1-aea2-47a5f825cf83",
              "parentUUID": "6e89b716-f8ef-47a6-952e-27c45cf1a048",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "Manipulating fabrics \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "fabric.close();",
              "err": {},
              "uuid": "70909fa8-d522-4a3d-baa7-e1af56c41117",
              "parentUUID": "6e89b716-f8ef-47a6-952e-27c45cf1a048",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "25b12fc6-f38e-46bc-9be4-076c4f6ce33c",
              "title": "fabric.version",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/01-manipulating-fabrics.js",
              "file": "/lib/async/test/01-manipulating-fabrics.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the version object when no details are required",
                  "fullTitle": "Manipulating fabrics fabric.version should return the version object when no details are required",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await fabric.version();\nchai_1.expect(response.server).to.equal(\"C8DB\");",
                  "err": {},
                  "uuid": "26f01ff2-04f1-42a8-9d66-37b435891bf2",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should return the version object when details are required",
                  "fullTitle": "Manipulating fabrics fabric.version should return the version object when details are required",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await fabric.version(true);\nchai_1.expect(response.server).to.equal(\"C8DB\");\nchai_1.expect(response.details).to.haveOwnProperty(\"architecture\");",
                  "err": {},
                  "uuid": "d4e28d54-cc88-4100-92c4-290744eca2fe",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "26f01ff2-04f1-42a8-9d66-37b435891bf2",
                "d4e28d54-cc88-4100-92c4-290744eca2fe"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "4d2cc65e-e1ef-4faa-8b02-5bc108ffbff3",
              "title": "fabric.useFabric",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/01-manipulating-fabrics.js",
              "file": "/lib/async/test/01-manipulating-fabrics.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "updates the fabric name",
                  "fullTitle": "Manipulating fabrics fabric.useFabric updates the fabric name",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const name = \"example\";\nchai_1.expect(fabric.name).to.equal(\"_system\"); // default\nfabric.useFabric(name);\nchai_1.expect(fabric._connection).to.have.property(\"_fabricName\", name);\nchai_1.expect(fabric.name).to.equal(name);",
                  "err": {},
                  "uuid": "e36a754f-3f19-4f50-9a2b-0459ce4fcd00",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "returns itself",
                  "fullTitle": "Manipulating fabrics fabric.useFabric returns itself",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fabric2 = fabric.useFabric(\"nope\");\nchai_1.expect(fabric).to.equal(fabric2);",
                  "err": {},
                  "uuid": "34306cb5-8b9e-4de6-a908-aca01f305693",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "e36a754f-3f19-4f50-9a2b-0459ce4fcd00",
                "34306cb5-8b9e-4de6-a908-aca01f305693"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "aaa80351-42d1-4982-be7b-66a280be78c4",
              "title": "fabric.edgeLocations",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/01-manipulating-fabrics.js",
              "file": "/lib/async/test/01-manipulating-fabrics.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "gets all the edge locations",
                  "fullTitle": "Manipulating fabrics fabric.edgeLocations gets all the edge locations",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await fabric.getAllEdgeLocations();\nchai_1.expect(Array.isArray(response)).to.be.true;\nchai_1.expect(response[0]).to.haveOwnProperty(\"_id\");\nchai_1.expect(response[0]).to.haveOwnProperty(\"name\");\nchai_1.expect(response[0]).to.haveOwnProperty(\"tags\");\nchai_1.expect(response.length).to.be.greaterThan(0);",
                  "err": {},
                  "uuid": "7bb38507-d7e9-4134-a407-2b3e3ef0331e",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "gets local edge location",
                  "fullTitle": "Manipulating fabrics fabric.edgeLocations gets local edge location",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await fabric.getLocalEdgeLocation();\nchai_1.expect(Array.isArray(response)).to.be.false;\nchai_1.expect(response).to.haveOwnProperty(\"_id\");\nchai_1.expect(response).to.haveOwnProperty(\"name\");\nchai_1.expect(response).to.haveOwnProperty(\"tags\");",
                  "err": {},
                  "uuid": "1de4dbca-cd64-4eb5-ba46-c964655cf161",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "7bb38507-d7e9-4134-a407-2b3e3ef0331e",
                "1de4dbca-cd64-4eb5-ba46-c964655cf161"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "55590a8f-187b-4c01-b67c-9193f7d8a27c",
              "title": "fabric.createFabric",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/01-manipulating-fabrics.js",
              "file": "/lib/async/test/01-manipulating-fabrics.js",
              "beforeHooks": [],
              "afterHooks": [
                {
                  "title": "\"after each\" hook",
                  "fullTitle": "Manipulating fabrics fabric.createFabric \"after each\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "fabric.useFabric(\"_system\");\nawait fabric.dropFabric(name);",
                  "err": {},
                  "uuid": "a2610e9d-027b-451c-b3cc-961d7c6afcf9",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "creates a fabric with the given name",
                  "fullTitle": "Manipulating fabrics fabric.createFabric creates a fabric with the given name",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await fabric.createFabric(name, [{ username: \"root\" }], {\n    dcList: dcList\n});\nfabric.useFabric(name);\nconst info = await fabric.get();\nchai_1.expect(info.name).to.equal(name);",
                  "err": {},
                  "uuid": "a688df6a-162e-4ec2-ad8d-d687e17da896",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "adds the given users to the fabric",
                  "fullTitle": "Manipulating fabrics fabric.createFabric adds the given users to the fabric",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "9531f546-54a0-4ad1-82b2-4ea3bd4e8007",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "9531f546-54a0-4ad1-82b2-4ea3bd4e8007"
              ],
              "skipped": [
                "a688df6a-162e-4ec2-ad8d-d687e17da896"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "3c3bae77-7c5c-42a7-a192-a0abf336dc26",
              "title": "fabric.get",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/01-manipulating-fabrics.js",
              "file": "/lib/async/test/01-manipulating-fabrics.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "fetches the fabric description if the fabric exists",
                  "fullTitle": "Manipulating fabrics fabric.get fetches the fabric description if the fabric exists",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const info = await fabric.get();\nchai_1.expect(info.name).to.equal(fabric.name);\nchai_1.expect(fabric.name).to.equal(\"_system\");",
                  "err": {},
                  "uuid": "f79810c8-2660-440a-8ff3-d76e1397354b",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "fails if the fabric does not exist",
                  "fullTitle": "Manipulating fabrics fabric.get fails if the fabric does not exist",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "fabric.useFabric(\"__does_not_exist__\");\ntry {\n    await fabric.get();\n}\ncatch (e) {\n    chai_1.expect(e).to.be.an.instanceof(error_1.C8Error);\n    return;\n}\nchai_1.expect.fail(\"should not succeed\");",
                  "err": {},
                  "uuid": "6fc1678e-58e2-4d71-bb48-0adcaddde475",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "f79810c8-2660-440a-8ff3-d76e1397354b",
                "6fc1678e-58e2-4d71-bb48-0adcaddde475"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "bdb72257-8134-4637-8b48-1e50e64d563d",
              "title": "fabric.listFabrics",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/01-manipulating-fabrics.js",
              "file": "/lib/async/test/01-manipulating-fabrics.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns a list of all fabrics",
                  "fullTitle": "Manipulating fabrics fabric.listFabrics returns a list of all fabrics",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fabrics = await fabric.listFabrics();\nchai_1.expect(fabrics).to.be.an.instanceof(Array);\nchai_1.expect(fabrics.indexOf(\"_system\")).to.be.greaterThan(-1);",
                  "err": {},
                  "uuid": "76a762a6-a54f-4448-9f30-a5e20f844bcb",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "76a762a6-a54f-4448-9f30-a5e20f844bcb"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "e7df25de-af26-4e00-9b30-0a61ba91edad",
              "title": "fabric.listUserFabrics",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/01-manipulating-fabrics.js",
              "file": "/lib/async/test/01-manipulating-fabrics.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns a list of fabrics accessible to the active user",
                  "fullTitle": "Manipulating fabrics fabric.listUserFabrics returns a list of fabrics accessible to the active user",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fabrics = await fabric.listUserFabrics();\nchai_1.expect(fabrics).to.be.an.instanceof(Array);\nchai_1.expect(fabrics[0].name).to.equal(\"_system\");",
                  "err": {},
                  "uuid": "788d209a-5e97-4fe5-a641-55a544706f2f",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "788d209a-5e97-4fe5-a641-55a544706f2f"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "fcdc5097-2a5c-4484-af61-a7ad4d1231a0",
              "title": "fabric.dropFabric",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/01-manipulating-fabrics.js",
              "file": "/lib/async/test/01-manipulating-fabrics.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Manipulating fabrics fabric.dropFabric \"before each\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await fabric.createFabric(name, [{ username: \"root\" }], {\n    dcList: dcList\n});",
                  "err": {},
                  "uuid": "e69590c4-3e08-4f1e-ba65-daad08120570",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "deletes the given fabric from the server",
                  "fullTitle": "Manipulating fabrics fabric.dropFabric deletes the given fabric from the server",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await fabric.dropFabric(name);\nlet temp = new jsC8_1.Fabric().useFabric(name);\ntry {\n    await temp.get();\n}\ncatch (e) {\n    return;\n}\nfinally {\n    temp.close();\n}\nchai_1.expect.fail(\"should not succeed\");",
                  "err": {},
                  "uuid": "a56744a4-ebdc-49c7-a336-746eb4617f9b",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "a56744a4-ebdc-49c7-a336-746eb4617f9b"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "28fa1fab-8fb2-459d-9f5d-83f27e69c4ab",
              "title": "fabric.truncate",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/01-manipulating-fabrics.js",
              "file": "/lib/async/test/01-manipulating-fabrics.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Manipulating fabrics fabric.truncate \"before each\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await fabric.createFabric(name, [{ username: \"root\" }], {\n    dcList: dcList\n});\nfabric.useFabric(name);\nawait Promise.all([\n    ...nonSystemCollections.map(async (name) => {\n        let collection = fabric.collection(name);\n        await collection.create();\n        await collection.save({ _key: \"example\" });\n    }),\n    ...systemCollections.map(async (name) => {\n        let collection = fabric.collection(name);\n        await collection.create({ isSystem: true });\n        await collection.save({ _key: \"example\" });\n    })\n]);",
                  "err": {},
                  "uuid": "92b7c6c9-4ddd-4b23-be09-f11f2d5c8c0a",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook",
                  "fullTitle": "Manipulating fabrics fabric.truncate \"after each\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "fabric.useFabric(\"_system\");\nawait fabric.dropFabric(name);",
                  "err": {},
                  "uuid": "fea0f74b-6ec7-4ada-9c16-56ba6b04d00d",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "removes all documents from all non-system collections in the fabric",
                  "fullTitle": "Manipulating fabrics fabric.truncate removes all documents from all non-system collections in the fabric",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await fabric.truncate();\nawait Promise.all([\n    ...nonSystemCollections.map(async (name) => {\n        try {\n            await fabric.collection(name).document(\"example\");\n            chai_1.expect.fail(\"Expected document to be destroyed\");\n        }\n        catch (e) {\n            chai_1.expect(e).to.be.an.instanceof(error_1.C8Error);\n            chai_1.expect(e.code).eq(404);\n            return;\n        }\n    }),\n    ...systemCollections.map(async (name) => {\n        try {\n            await fabric.collection(name).document(\"example\");\n            chai_1.expect.fail(\"Expected document to be destroyed\");\n        }\n        catch (e) {\n            chai_1.expect(e).to.be.an.instanceof(error_1.C8Error);\n            chai_1.expect(e.code).eq(404);\n            return;\n        }\n    })\n]);",
                  "err": {},
                  "uuid": "9eab2e79-9238-40dc-a90c-7ae5217d9a21",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "additionally truncates system collections if explicitly passed false",
                  "fullTitle": "Manipulating fabrics fabric.truncate additionally truncates system collections if explicitly passed false",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "513f3aae-ba1b-4128-b1e3-8b25764c2ac5",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "513f3aae-ba1b-4128-b1e3-8b25764c2ac5"
              ],
              "skipped": [
                "9eab2e79-9238-40dc-a90c-7ae5217d9a21"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "0bf55a05-3644-4c0b-bba2-818b4cf3b84e",
              "title": "fabric.validateQuery",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/01-manipulating-fabrics.js",
              "file": "/lib/async/test/01-manipulating-fabrics.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should validate correct query",
                  "fullTitle": "Manipulating fabrics fabric.validateQuery should validate correct query",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await fabric.validateQuery(\"for doc in docs return doc\");\nchai_1.expect(response.error).to.be.false;",
                  "err": {},
                  "uuid": "acfb1f47-5a46-48fc-b279-b31b4bf4b87b",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should validate incorrect query",
                  "fullTitle": "Manipulating fabrics fabric.validateQuery should validate incorrect query",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "try {\n    const response = await fabric.validateQuery(\"forrrr doc in docs return doc\");\n    chai_1.expect(response.error).to.be.true;\n}\ncatch (e) {\n    chai_1.expect(e).to.be.an.instanceof(error_1.C8Error);\n}",
                  "err": {},
                  "uuid": "3253242a-16cd-4bdf-9f40-9fd3fd5bb854",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "acfb1f47-5a46-48fc-b279-b31b4bf4b87b",
                "3253242a-16cd-4bdf-9f40-9fd3fd5bb854"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "b7eb2d64-a61f-47fe-b1c6-d94a862ecd80",
              "title": "fabric.explainQuery",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/01-manipulating-fabrics.js",
              "file": "/lib/async/test/01-manipulating-fabrics.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should explain query",
                  "fullTitle": "Manipulating fabrics fabric.explainQuery should explain query",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const queryObject = {\n    query: `for doc in ${collectionName} return doc`,\n    bindVars: {}\n};\nconst response = await fabric.explainQuery(queryObject);\nchai_1.expect(response.error).to.be.false;",
                  "err": {},
                  "uuid": "d213af72-a567-4e4f-8632-cfa1d73aba4a",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "d213af72-a567-4e4f-8632-cfa1d73aba4a"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "5307f48c-6fb2-4825-9295-d0af75537cb2",
              "title": "fabric.getCurrentQueries",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/01-manipulating-fabrics.js",
              "file": "/lib/async/test/01-manipulating-fabrics.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get currently running queries",
                  "fullTitle": "Manipulating fabrics fabric.getCurrentQueries should get currently running queries",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "3c7605df-6a74-4073-8803-d3af63eea173",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "3c7605df-6a74-4073-8803-d3af63eea173"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "8deb5fdf-2849-4252-8ebb-9570fc75ad0b",
              "title": "fabric.clearSlowQueries",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/01-manipulating-fabrics.js",
              "file": "/lib/async/test/01-manipulating-fabrics.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should clear slow queries",
                  "fullTitle": "Manipulating fabrics fabric.clearSlowQueries should clear slow queries",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "655240a6-dfd6-43c4-9bff-7c3906a373a8",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "655240a6-dfd6-43c4-9bff-7c3906a373a8"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "41d33612-9c25-4067-9741-a79cd6dd5004",
              "title": "fabric.terminateRunningQuery",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/01-manipulating-fabrics.js",
              "file": "/lib/async/test/01-manipulating-fabrics.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should terminate running query",
                  "fullTitle": "Manipulating fabrics fabric.terminateRunningQuery should terminate running query",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "32e500db-7d04-4394-8b32-4673fab27ca5",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "32e500db-7d04-4394-8b32-4673fab27ca5"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "37232d0c-a797-460b-9212-18d965b8f0f6",
          "title": "Accessing collections",
          "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/02-accessing-collections.js",
          "file": "/lib/async/test/02-accessing-collections.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Accessing collections \"before all\" hook",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "fabric = new jsC8_1.Fabric({\n    url: testUrl,\n    c8Version: Number(process.env.C8_VERSION || 30400)\n});\nawait fabric.login(\"guest@macrometa.io\", \"guest\");\nfabric.useTenant(\"guest\");\nconst response = await fabric.getAllEdgeLocations();\ndcList = helper_1.getDCListString(response);\nawait fabric.createFabric(name, [{ username: \"root\" }], { dcList: dcList });\nfabric.useFabric(name);\nconst collections = await fabric.listCollections(false);\nbuiltinSystemCollections = collections.map((c) => c.name);",
              "err": {
                "message": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443",
                "estack": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:57:26)",
                "diff": null
              },
              "uuid": "78f7985e-30d5-4804-b76a-0b9286120641",
              "parentUUID": "37232d0c-a797-460b-9212-18d965b8f0f6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "Accessing collections \"after all\" hook",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "try {\n    fabric.useFabric(\"_system\");\n    await fabric.dropFabric(name);\n}\nfinally {\n    fabric.close();\n}",
              "err": {
                "message": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443",
                "estack": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:57:26)",
                "diff": null
              },
              "uuid": "56192099-5c11-49af-b83c-0ac1f115b752",
              "parentUUID": "37232d0c-a797-460b-9212-18d965b8f0f6",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "2d0b6af9-3714-481c-805e-813fd4917000",
              "title": "fabric.collection",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/02-accessing-collections.js",
              "file": "/lib/async/test/02-accessing-collections.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns a DocumentCollection instance for the collection",
                  "fullTitle": "Accessing collections fabric.collection returns a DocumentCollection instance for the collection",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let name = \"potato\";\nlet collection = fabric.collection(name);\nchai_1.expect(collection).to.be.an.instanceof(collection_1.DocumentCollection);\nchai_1.expect(collection)\n    .to.have.property(\"name\")\n    .that.equals(name);",
                  "err": {},
                  "uuid": "ccf85fc0-15b1-426f-a0c5-4394954995b7",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "ccf85fc0-15b1-426f-a0c5-4394954995b7"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 600000
            },
            {
              "uuid": "0661ef97-0ab6-4b68-ba1d-3908933d0485",
              "title": "fabric.edgeCollection",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/02-accessing-collections.js",
              "file": "/lib/async/test/02-accessing-collections.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns an EdgeCollection instance for the collection",
                  "fullTitle": "Accessing collections fabric.edgeCollection returns an EdgeCollection instance for the collection",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let name = \"tomato\";\nlet collection = fabric.edgeCollection(name);\nchai_1.expect(collection).to.be.an.instanceof(collection_1.EdgeCollection);\nchai_1.expect(collection)\n    .to.have.property(\"name\")\n    .that.equals(name);",
                  "err": {},
                  "uuid": "7fe47f65-5a64-48f2-b6df-c32c3550870a",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "7fe47f65-5a64-48f2-b6df-c32c3550870a"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 600000
            },
            {
              "uuid": "688b1ae7-0e8e-4d34-a954-8ba3d0612608",
              "title": "fabric.listCollections",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/02-accessing-collections.js",
              "file": "/lib/async/test/02-accessing-collections.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook",
                  "fullTitle": "Accessing collections fabric.listCollections \"before all\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await Promise.all([\n    ...nonSystemCollectionNames.map(name => fabric.collection(name).create())\n    // ...systemCollectionNames.map(name =>\n    //   fabric.collection(name).create({ isSystem: true })\n    // )\n]);",
                  "err": {},
                  "uuid": "19875eba-32d0-49a8-ba6c-004e9ad2a0cb",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook",
                  "fullTitle": "Accessing collections fabric.listCollections \"after all\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "Promise.all([\n    ...nonSystemCollectionNames.map(name => fabric.collection(name).drop())\n    // ...systemCollectionNames.map(name =>\n    //   fabric.collection(name).drop({ isSystem: true })\n    // )\n])\n    .then(() => void done())\n    .catch(done);",
                  "err": {},
                  "uuid": "38b4dfaa-8c43-4111-82bd-11aa218d101c",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "fetches information about all non-system collections",
                  "fullTitle": "Accessing collections fabric.listCollections fetches information about all non-system collections",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "fabric\n    .listCollections()\n    .then(collections => {\n    chai_1.expect(collections.length).to.equal(nonSystemCollectionNames.length);\n    chai_1.expect(collections.map((c) => c.name).sort()).to.eql(nonSystemCollectionNames);\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "5fe232e3-f2c0-41ef-95aa-0173a6dd545c",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "includes system collections if explicitly passed false",
                  "fullTitle": "Accessing collections fabric.listCollections includes system collections if explicitly passed false",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "fabric\n    .listCollections(false)\n    .then(collections => {\n    let allCollectionNames = nonSystemCollectionNames\n        // .concat(systemCollectionNames)\n        .concat(builtinSystemCollections)\n        .sort();\n    chai_1.expect(collections.length).to.be.at.least(allCollectionNames.length);\n    chai_1.expect(collections.map((c) => c.name).sort()).to.eql(allCollectionNames);\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "600d954b-f280-43ad-8a7b-ddf2b607b4e1",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "5fe232e3-f2c0-41ef-95aa-0173a6dd545c",
                "600d954b-f280-43ad-8a7b-ddf2b607b4e1"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 600000
            },
            {
              "uuid": "056284cc-6bda-4c6f-8cf5-600a7fbf4bc9",
              "title": "fabric.collections",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/02-accessing-collections.js",
              "file": "/lib/async/test/02-accessing-collections.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook",
                  "fullTitle": "Accessing collections fabric.collections \"before all\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "Promise.all([\n    ...documentCollectionNames.map(name => fabric.collection(name).create()),\n    ...edgeCollectionNames.map(name => fabric.edgeCollection(name).create())\n])\n    .then(() => void done())\n    .catch(done);",
                  "err": {},
                  "uuid": "634431ec-279a-4542-bdfe-766dd3fc6338",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook",
                  "fullTitle": "Accessing collections fabric.collections \"after all\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "Promise.all([\n    ...documentCollectionNames.map(name => fabric.collection(name).drop()),\n    ...edgeCollectionNames.map(name => fabric.edgeCollection(name).drop())\n])\n    .then(() => void done())\n    .catch(done);",
                  "err": {},
                  "uuid": "0009fa05-8086-41a2-87aa-5ec6573d5f08",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "creates DocumentCollection and EdgeCollection instances",
                  "fullTitle": "Accessing collections fabric.collections creates DocumentCollection and EdgeCollection instances",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "fabric\n    .collections()\n    .then(collections => {\n    let documentCollections = collections\n        .filter((c) => c instanceof collection_1.DocumentCollection)\n        .sort();\n    let edgeCollections = collections\n        .filter((c) => c instanceof collection_1.EdgeCollection)\n        .sort();\n    chai_1.expect(documentCollections.length).to.equal(documentCollectionNames.length);\n    chai_1.expect(documentCollections.map((c) => c.name).sort()).to.eql(documentCollectionNames);\n    chai_1.expect(edgeCollections.length).to.equal(edgeCollectionNames.length);\n    chai_1.expect(edgeCollections.map((c) => c.name).sort()).to.eql(edgeCollectionNames);\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "7d6fb3d2-e88d-40af-92df-7a57eb5e1149",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "includes system collections if explicitly passed false",
                  "fullTitle": "Accessing collections fabric.collections includes system collections if explicitly passed false",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "fabric\n    .collections(false)\n    .then(collections => {\n    let documentCollections = collections.filter((c) => c instanceof collection_1.DocumentCollection);\n    let edgeCollections = collections.filter((c) => c instanceof collection_1.EdgeCollection);\n    let allDocumentCollectionNames = documentCollectionNames\n        .concat(builtinSystemCollections)\n        .sort();\n    chai_1.expect(documentCollections.length).to.be.at.least(allDocumentCollectionNames.length);\n    chai_1.expect(documentCollections.map((c) => c.name).sort()).to.eql(allDocumentCollectionNames);\n    chai_1.expect(edgeCollections.length).to.be.at.least(edgeCollectionNames.length);\n    chai_1.expect(edgeCollections.map((c) => c.name).sort()).to.eql(edgeCollectionNames);\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "ac3baeb5-c029-4d74-8b98-776dce55b2cc",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "7d6fb3d2-e88d-40af-92df-7a57eb5e1149",
                "ac3baeb5-c029-4d74-8b98-776dce55b2cc"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 600000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 600000
        },
        {
          "uuid": "6284f602-52bd-47d3-9e66-d55fcb2e1d97",
          "title": "Accessing graphs",
          "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/03-accessing-graphs.js",
          "file": "/lib/async/test/03-accessing-graphs.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Accessing graphs \"before all\" hook",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "fabric = new jsC8_1.Fabric({\n    url: testUrl,\n    c8Version: Number(process.env.C8_VERSION || 30400)\n});\nawait fabric.login(\"guest@macrometa.io\", \"guest\");\nfabric.useTenant(\"guest\");\nconst response = await fabric.getAllEdgeLocations();\ndcList = helper_1.getDCListString(response);\nawait fabric.createFabric(name, [{ username: \"root\" }], { dcList: dcList });\nfabric.useFabric(name);",
              "err": {
                "message": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443",
                "estack": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:57:26)",
                "diff": null
              },
              "uuid": "62fbf104-a48b-408c-a54f-6a0b9f31411b",
              "parentUUID": "6284f602-52bd-47d3-9e66-d55fcb2e1d97",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "Accessing graphs \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "try {\n    fabric.useFabric(\"_system\");\n    await fabric.dropFabric(name);\n}\nfinally {\n    fabric.close();\n}",
              "err": {
                "message": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443",
                "estack": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:57:26)",
                "diff": null
              },
              "uuid": "ff3914d6-9043-419e-912b-f69a8fc4757f",
              "parentUUID": "6284f602-52bd-47d3-9e66-d55fcb2e1d97",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "a056f38e-a656-4d50-b2d9-2ab9ee963e79",
              "title": "fabric.graph",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/03-accessing-graphs.js",
              "file": "/lib/async/test/03-accessing-graphs.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns a Graph instance",
                  "fullTitle": "Accessing graphs fabric.graph returns a Graph instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let name = \"potato\";\nlet graph = fabric.graph(name);\nchai_1.expect(graph).to.be.an.instanceof(graph_1.Graph);\nchai_1.expect(graph)\n    .to.have.property(\"name\")\n    .that.equals(name);",
                  "err": {},
                  "uuid": "fd577630-16f2-4ff7-814d-9175e29fd394",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "fd577630-16f2-4ff7-814d-9175e29fd394"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 600000
            },
            {
              "uuid": "1a761ee9-eab9-4afb-953e-9378f0707534",
              "title": "fabric.listGraphs",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/03-accessing-graphs.js",
              "file": "/lib/async/test/03-accessing-graphs.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook",
                  "fullTitle": "Accessing graphs fabric.listGraphs \"before all\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "Promise.all([\n    ...vertexCollectionNames.map(name => fabric.collection(name).create()),\n    ...edgeCollectionNames.map(name => fabric.edgeCollection(name).create())\n])\n    .then(() => Promise.all([\n    ...graphNames.map(name => fabric.graph(name).create({\n        edgeDefinitions: edgeCollectionNames.map(name => ({\n            collection: name,\n            from: vertexCollectionNames,\n            to: vertexCollectionNames\n        })),\n        isSmart: true,\n        options: {\n            numberOfShards: 1,\n            smartGraphAttribute: \"test\"\n        },\n        orphanCollections: []\n    }))\n]))\n    .then(() => void done())\n    .catch(done);",
                  "err": {},
                  "uuid": "990e9f44-3f72-4ddf-b552-6d9e8a380206",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook",
                  "fullTitle": "Accessing graphs fabric.listGraphs \"after all\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "Promise.all(graphNames.map(name => fabric.graph(name).drop()))\n    .then(() => Promise.all(vertexCollectionNames\n    .concat(edgeCollectionNames)\n    .map(name => fabric.collection(name).drop())))\n    .then(() => void done())\n    .catch(done);",
                  "err": {},
                  "uuid": "36cc0907-a790-4b9c-8fcc-c9e60b2254de",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "fetches information about all graphs",
                  "fullTitle": "Accessing graphs fabric.listGraphs fetches information about all graphs",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "fabric\n    .listGraphs()\n    .then(graphs => {\n    chai_1.expect(graphs.length).to.equal(graphNames.length);\n    chai_1.expect(graphs.map((g) => g._key).sort()).to.eql(graphNames);\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "513fcb97-810c-432a-bc9a-71ce63a50252",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "513fcb97-810c-432a-bc9a-71ce63a50252"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 600000
            },
            {
              "uuid": "f54a7940-a289-49a9-885e-55489d069be8",
              "title": "fabric.graphs",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/03-accessing-graphs.js",
              "file": "/lib/async/test/03-accessing-graphs.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook",
                  "fullTitle": "Accessing graphs fabric.graphs \"before all\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "Promise.all([\n    ...vertexCollectionNames.map(name => fabric.collection(name).create()),\n    ...edgeCollectionNames.map(name => fabric.edgeCollection(name).create())\n])\n    .then(() => Promise.all([\n    ...graphNames.map(name => fabric.graph(name).create({\n        edgeDefinitions: edgeCollectionNames.map(name => ({\n            collection: name,\n            from: vertexCollectionNames,\n            to: vertexCollectionNames\n        }))\n    }))\n]))\n    .then(() => void done())\n    .catch(done);",
                  "err": {},
                  "uuid": "a31288fe-4b25-466b-8224-00f0d3df5647",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook",
                  "fullTitle": "Accessing graphs fabric.graphs \"after all\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "Promise.all(graphNames.map(name => fabric.graph(name).drop()))\n    .then(() => Promise.all(vertexCollectionNames\n    .concat(edgeCollectionNames)\n    .map(name => fabric.collection(name).drop())))\n    .then(() => void done())\n    .catch(done);",
                  "err": {},
                  "uuid": "09723176-f42a-429b-ae10-17261f1d1a45",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "creates Graph instances",
                  "fullTitle": "Accessing graphs fabric.graphs creates Graph instances",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "fabric\n    .graphs()\n    .then(graphs => {\n    chai_1.expect(graphs.length).to.equal(graphNames.length);\n    chai_1.expect(graphs.map((g) => g.name).sort()).to.eql(graphNames);\n    graphs.forEach((graph) => chai_1.expect(graph).to.be.an.instanceof(graph_1.Graph));\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "856aa832-044a-4d2a-a451-b9fa66875dfe",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "856aa832-044a-4d2a-a451-b9fa66875dfe"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 600000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 600000
        },
        {
          "uuid": "0b7712bb-97a1-4dc9-bdd7-eac771eec717",
          "title": "Transactions",
          "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/04-transactions.js",
          "file": "/lib/async/test/04-transactions.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Transactions \"before all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "fabric = new jsC8_1.Fabric({\n    url: process.env.TEST_C8_URL || \"https://test.macrometa.io\",\n    c8Version: Number(process.env.C8_VERSION || 30400)\n});\nawait fabric.login(\"guest@macrometa.io\", \"guest\");\nfabric.useTenant(\"guest\");",
              "err": {
                "message": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443",
                "estack": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:57:26)",
                "diff": null
              },
              "uuid": "03678d5c-606f-44c2-a2f1-8365c24eae6c",
              "parentUUID": "0b7712bb-97a1-4dc9-bdd7-eac771eec717",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "Transactions \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "fabric.close();",
              "err": {},
              "uuid": "3fb2a7ff-21b7-4f25-91f9-fd322bfc02e7",
              "parentUUID": "0b7712bb-97a1-4dc9-bdd7-eac771eec717",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "e312b94f-f555-47b6-8f1d-6eabf90c59ee",
              "title": "fabric.transaction",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/04-transactions.js",
              "file": "/lib/async/test/04-transactions.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should execute a transaction and return the result",
                  "fullTitle": "Transactions fabric.transaction should execute a transaction and return the result",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await fabric.transaction([], \"function (params) {return params;}\", \"test\");\nchai_1.expect(result).to.equal(\"test\");",
                  "err": {},
                  "uuid": "0836fdf7-79d4-43d5-af39-5b2a75104fe3",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "0836fdf7-79d4-43d5-af39-5b2a75104fe3"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "68588137-e325-45a6-930c-7b230d8b9654",
          "title": "C8QL queries",
          "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/05-c8ql-queries.js",
          "file": "/lib/async/test/05-c8ql-queries.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "C8QL queries \"before all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "fabric = new jsC8_1.Fabric({\n    url: testUrl,\n    c8Version: Number(process.env.C8_VERSION || 30400)\n});\nawait fabric.login(\"guest@macrometa.io\", \"guest\");\nfabric.useTenant(\"guest\");\nconst response = await fabric.getAllEdgeLocations();\ndcList = helper_1.getDCListString(response);\nawait fabric.createFabric(name, [{ username: \"root\" }], { dcList: dcList });\nfabric.useFabric(name);",
              "err": {
                "message": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443",
                "estack": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:57:26)",
                "diff": null
              },
              "uuid": "762f5be9-04e5-48b8-a4a3-9c7442e33906",
              "parentUUID": "68588137-e325-45a6-930c-7b230d8b9654",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "C8QL queries \"after all\" hook",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "try {\n    fabric.useFabric(\"_system\");\n    await fabric.dropFabric(name);\n}\nfinally {\n    fabric.close();\n}",
              "err": {
                "message": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443",
                "estack": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:57:26)",
                "diff": null
              },
              "uuid": "68b41e97-d75a-4ee1-9177-4d14085713ef",
              "parentUUID": "68588137-e325-45a6-930c-7b230d8b9654",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "4b157edb-7855-4ecc-9630-136babc19bf4",
              "title": "fabric.query",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/05-c8ql-queries.js",
              "file": "/lib/async/test/05-c8ql-queries.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns a cursor for the query result",
                  "fullTitle": "C8QL queries fabric.query returns a cursor for the query result",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "fabric\n    .query(\"RETURN 23\")\n    .then(cursor => {\n    chai_1.expect(cursor).to.be.an.instanceof(cursor_1.ArrayCursor);\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "9864ea76-0bb1-4dfd-b14a-90264a61d552",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "throws an exception on error",
                  "fullTitle": "C8QL queries fabric.query throws an exception on error",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "fabric\n    .query(\"FOR i IN no RETURN i\")\n    .then(() => {\n    chai_1.expect.fail();\n    done();\n})\n    .catch(err => {\n    chai_1.expect(err).is.instanceof(error_1.C8Error);\n    chai_1.expect(err).to.have.property(\"statusCode\", 404);\n    chai_1.expect(err).to.have.property(\"errorNum\", 1203);\n    done();\n});",
                  "err": {},
                  "uuid": "59f9412a-a082-4e4b-b335-1d0289e757b1",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "throws an exception on error (async await)",
                  "fullTitle": "C8QL queries fabric.query throws an exception on error (async await)",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "try {\n    await fabric.query(\"FOR i IN no RETURN i\");\n    chai_1.expect.fail();\n}\ncatch (err) {\n    chai_1.expect(err).is.instanceof(error_1.C8Error);\n    chai_1.expect(err).to.have.property(\"statusCode\", 404);\n    chai_1.expect(err).to.have.property(\"errorNum\", 1203);\n}",
                  "err": {},
                  "uuid": "0f227990-6250-483a-9622-b543f5332893",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "supports bindVars",
                  "fullTitle": "C8QL queries fabric.query supports bindVars",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "fabric\n    .query(\"RETURN @x\", { x: 5 })\n    .then(cursor => cursor.next())\n    .then(value => {\n    chai_1.expect(value).to.equal(5);\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "81bdb12d-eecb-4aeb-baa9-324ddd801bb9",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "supports options",
                  "fullTitle": "C8QL queries fabric.query supports options",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "fabric\n    .query(\"FOR x IN 1..10 RETURN x\", undefined, {\n    batchSize: 2,\n    count: true\n})\n    .then(cursor => {\n    chai_1.expect(cursor.count).to.equal(10);\n    chai_1.expect(cursor._hasMore).to.equal(true);\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "501c2675-0011-4d7a-9a0c-775715295c99",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "supports AQB queries",
                  "fullTitle": "C8QL queries fabric.query supports AQB queries",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "fabric\n    .query({ toC8QL: () => \"RETURN 42\" })\n    .then(cursor => cursor.next())\n    .then(value => {\n    chai_1.expect(value).to.equal(42);\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "1d97743f-235a-45da-9c3e-596a6cf9c0e8",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "supports query objects",
                  "fullTitle": "C8QL queries fabric.query supports query objects",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "fabric\n    .query({ query: \"RETURN 1337\", bindVars: {} })\n    .then(cursor => cursor.next())\n    .then(value => {\n    chai_1.expect(value).to.equal(1337);\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "c0837c42-2141-42df-8283-358b8b5c504b",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "supports compact queries",
                  "fullTitle": "C8QL queries fabric.query supports compact queries",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "fabric\n    .query({ query: \"RETURN @potato\", bindVars: { potato: \"tomato\" } })\n    .then(cursor => cursor.next())\n    .then(value => {\n    chai_1.expect(value).to.equal(\"tomato\");\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "81bbbc3d-330d-49ab-846c-cc0d617a5c1a",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "supports compact queries with options",
                  "fullTitle": "C8QL queries fabric.query supports compact queries with options",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let query = {\n    query: \"FOR x IN RANGE(1, @max) RETURN x\",\n    bindVars: { max: 10 }\n};\nfabric\n    .query(query, { batchSize: 2, count: true })\n    .then(cursor => {\n    chai_1.expect(cursor.count).to.equal(10);\n    chai_1.expect(cursor._hasMore).to.equal(true);\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "f61da759-6df5-4020-93a0-084f5c4b6a2e",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "9864ea76-0bb1-4dfd-b14a-90264a61d552",
                "59f9412a-a082-4e4b-b335-1d0289e757b1",
                "0f227990-6250-483a-9622-b543f5332893",
                "81bdb12d-eecb-4aeb-baa9-324ddd801bb9",
                "501c2675-0011-4d7a-9a0c-775715295c99",
                "1d97743f-235a-45da-9c3e-596a6cf9c0e8",
                "c0837c42-2141-42df-8283-358b8b5c504b",
                "81bbbc3d-330d-49ab-846c-cc0d617a5c1a",
                "f61da759-6df5-4020-93a0-084f5c4b6a2e"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "372e8506-c75a-4910-9189-bb6aea966754",
              "title": "c8ql",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/05-c8ql-queries.js",
              "file": "/lib/async/test/05-c8ql-queries.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "correctly handles simple parameters",
                  "fullTitle": "C8QL queries c8ql correctly handles simple parameters",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let values = [\n    0,\n    42,\n    -1,\n    null,\n    undefined,\n    true,\n    false,\n    \"\",\n    \"string\",\n    [1, 2, 3],\n    { a: \"b\" }\n];\nlet query = jsC8_1.c8ql `\n        A ${values[0]} B ${values[1]} C ${values[2]} D ${values[3]} E ${values[4]} F ${values[5]}\n        G ${values[6]} H ${values[7]} I ${values[8]} J ${values[9]} K ${values[10]} EOF\n      `;\nchai_1.expect(query.query).to.equal(`\n        A @value0 B @value1 C @value2 D @value3 E @value4 F @value5\n        G @value6 H @value7 I @value8 J @value9 K @value10 EOF\n      `);\nlet bindVarNames = Object.keys(query.bindVars).sort((a, b) => (+a.substr(5) > +b.substr(5) ? 1 : -1));\nchai_1.expect(bindVarNames).to.eql([\n    \"value0\",\n    \"value1\",\n    \"value2\",\n    \"value3\",\n    \"value4\",\n    \"value5\",\n    \"value6\",\n    \"value7\",\n    \"value8\",\n    \"value9\",\n    \"value10\"\n]);\nchai_1.expect(bindVarNames.map(k => query.bindVars[k])).to.eql(values);",
                  "err": {},
                  "uuid": "ac333c38-bf57-42f5-ba20-2932d0187b7e",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "correctly handles jsC8 collection parameters",
                  "fullTitle": "C8QL queries c8ql correctly handles jsC8 collection parameters",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let collection = fabric.collection(\"potato\");\nlet query = jsC8_1.c8ql `${collection}`;\nchai_1.expect(query.query).to.equal(\"@@value0\");\nchai_1.expect(Object.keys(query.bindVars)).to.eql([\"@value0\"]);\nchai_1.expect(query.bindVars[\"@value0\"]).to.equal(\"potato\");",
                  "err": {},
                  "uuid": "9a0d3c21-72d1-4d7b-b6be-aa784fed4a84",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "correctly handles C8 collection parameters",
                  "fullTitle": "C8QL queries c8ql correctly handles C8 collection parameters",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "class C8Collection {\n    constructor() {\n        this.isC8Collection = true;\n        this.name = \"tomato\";\n    }\n}\nlet collection = new C8Collection();\nlet query = jsC8_1.c8ql `${collection}`;\nchai_1.expect(query.query).to.equal(\"@@value0\");\nchai_1.expect(Object.keys(query.bindVars)).to.eql([\"@value0\"]);\nchai_1.expect(query.bindVars[\"@value0\"]).to.equal(\"tomato\");",
                  "err": {},
                  "uuid": "9d5e5b3c-1960-4eab-873a-4494ec39bde3",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "ac333c38-bf57-42f5-ba20-2932d0187b7e",
                "9a0d3c21-72d1-4d7b-b6be-aa784fed4a84",
                "9d5e5b3c-1960-4eab-873a-4494ec39bde3"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "e2ae4af1-0fd6-440e-a50d-bc9878091b16",
          "title": "Route API",
          "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/07-routes.js",
          "file": "/lib/async/test/07-routes.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Route API \"before all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "fabric = new jsC8_1.Fabric({\n    url: testUrl,\n    c8Version: Number(process.env.C8_VERSION || 30400)\n});\nawait fabric.login(\"guest@macrometa.io\", \"guest\");\nfabric.useTenant(\"guest\");\nconst response = await fabric.getAllEdgeLocations();\ndcList = helper_1.getDCListString(response);\nawait fabric.createFabric(name, [{ username: \"root\" }], { dcList: dcList });\nfabric.useFabric(name);\ncollection = fabric.collection(`c${Date.now()}`);\nawait collection.create();",
              "err": {
                "message": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443",
                "estack": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:57:26)",
                "diff": null
              },
              "uuid": "325a881e-22be-489b-8b02-239ab7b7a7d1",
              "parentUUID": "e2ae4af1-0fd6-440e-a50d-bc9878091b16",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "Route API \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await collection.truncate();",
              "err": {},
              "uuid": "9db7a690-075e-4603-89b0-75913df6efc5",
              "parentUUID": "e2ae4af1-0fd6-440e-a50d-bc9878091b16",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "Route API \"after all\" hook",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "try {\n    fabric.useFabric(\"_system\");\n    await fabric.dropFabric(name);\n}\nfinally {\n    fabric.close();\n}",
              "err": {
                "message": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443",
                "estack": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:57:26)",
                "diff": null
              },
              "uuid": "513ea711-76cd-4f5a-82d2-dfa73eec062c",
              "parentUUID": "e2ae4af1-0fd6-440e-a50d-bc9878091b16",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "1e709378-91d5-4647-ac6a-bb6c270a4c77",
              "title": "route.route",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/07-routes.js",
              "file": "/lib/async/test/07-routes.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should concat path",
                  "fullTitle": "Route API route.route should concat path",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const route = fabric.route(\"/api\").route(\"/version\");\nchai_1.expect(route).to.have.property(\"_path\", \"/api/version\");",
                  "err": {},
                  "uuid": "c2672fbc-2d98-4c37-9538-e50f639fedf6",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "c2672fbc-2d98-4c37-9538-e50f639fedf6"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "9b89ffb2-109d-4f25-a1c6-2e82033a7a0f",
              "title": "route.post",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/07-routes.js",
              "file": "/lib/async/test/07-routes.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should passes body",
                  "fullTitle": "Route API route.post should passes body",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "fabric\n    .route(`/document/${collection.name}`)\n    .post({ foo: \"bar\" })\n    .then(res => {\n    chai_1.expect(res).to.have.property(\"body\");\n    chai_1.expect(res.body).to.have.property(\"_id\");\n    chai_1.expect(res.body).to.have.property(\"_key\");\n    chai_1.expect(res.body).to.have.property(\"_rev\");\n})\n    .then(() => done())\n    .catch(done);",
                  "err": {},
                  "uuid": "65074180-8c7d-4b15-aed8-21641665e106",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "65074180-8c7d-4b15-aed8-21641665e106"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "c3adc24f-9b40-46ca-9a3c-9fbe1aa441f7",
              "title": "route.put",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/07-routes.js",
              "file": "/lib/async/test/07-routes.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Route API route.put \"before each\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "collection\n    .save({ foo: \"bar\" })\n    .then(doc => {\n    documentHandle = doc._id;\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "2d7045d2-b39a-4588-a72b-f390268e51a9",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should passes body",
                  "fullTitle": "Route API route.put should passes body",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "fabric\n    .route(`/document/${documentHandle}`)\n    .put({ hello: \"world\" })\n    .then(res => {\n    chai_1.expect(res).to.have.property(\"body\");\n    chai_1.expect(res.body).to.have.property(\"_id\");\n    chai_1.expect(res.body).to.have.property(\"_key\");\n    chai_1.expect(res.body).to.have.property(\"_rev\");\n})\n    .then(() => done())\n    .catch(done);",
                  "err": {},
                  "uuid": "08528d8b-9b68-4a97-a08e-9b7b476d561b",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "08528d8b-9b68-4a97-a08e-9b7b476d561b"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "7b286937-105f-4b9e-87c9-4f4ea59d234d",
              "title": "route.patch",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/07-routes.js",
              "file": "/lib/async/test/07-routes.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Route API route.patch \"before each\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "collection\n    .save({ foo: \"bar\" })\n    .then(doc => {\n    documentHandle = doc._id;\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "db1e17bf-e30f-48da-9137-daf0547ca190",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should passes body",
                  "fullTitle": "Route API route.patch should passes body",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "fabric\n    .route(`/document/${documentHandle}`)\n    .patch({ hello: \"world\" })\n    .then(res => {\n    chai_1.expect(res).to.have.property(\"body\");\n    chai_1.expect(res.body).to.have.property(\"_id\");\n    chai_1.expect(res.body).to.have.property(\"_key\");\n    chai_1.expect(res.body).to.have.property(\"_rev\");\n})\n    .then(() => done())\n    .catch(done);",
                  "err": {},
                  "uuid": "33ba6af3-eb3e-4a9a-ab1b-deb41603b702",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "33ba6af3-eb3e-4a9a-ab1b-deb41603b702"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "c642ff42-e295-4f57-825e-22820271eb34",
              "title": "route.delete",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/07-routes.js",
              "file": "/lib/async/test/07-routes.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Route API route.delete \"before each\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "collection\n    .save({ foo: \"bar\" })\n    .then(doc => {\n    documentHandle = doc._id;\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "cd4c8c6f-8144-41b0-8e40-eb01052db74b",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be executed using the route path",
                  "fullTitle": "Route API route.delete should be executed using the route path",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "fabric\n    .route(`/document/${documentHandle}`)\n    .delete()\n    .then(res => {\n    chai_1.expect(res).to.have.property(\"body\");\n    chai_1.expect(res.body).to.have.property(\"_id\");\n    chai_1.expect(res.body).to.have.property(\"_key\");\n    chai_1.expect(res.body).to.have.property(\"_rev\");\n})\n    .then(() => done())\n    .catch(done);",
                  "err": {},
                  "uuid": "65b45c11-ff88-44ed-9196-4b18b13a2dee",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "65b45c11-ff88-44ed-9196-4b18b13a2dee"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "3c5e6452-76c3-4cee-8ce5-e2f39a0754ec",
              "title": "route.head",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/07-routes.js",
              "file": "/lib/async/test/07-routes.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Route API route.head \"before each\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "collection\n    .save({ foo: \"bar\" })\n    .then(doc => {\n    documentHandle = doc._id;\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "c5b9cc86-5309-4ad2-8df4-de1005932ab9",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be executed using the route path",
                  "fullTitle": "Route API route.head should be executed using the route path",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "fabric\n    .route(`/document/${documentHandle}`)\n    .head()\n    .then(res => {\n    chai_1.expect(res).to.have.property(\"statusCode\", 200);\n})\n    .then(() => done())\n    .catch(done);",
                  "err": {},
                  "uuid": "8cdad41f-ffcd-481b-a503-77c130401130",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "8cdad41f-ffcd-481b-a503-77c130401130"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "be03f3e0-72c8-4265-a875-025d0a52b57d",
          "title": "Cursor API",
          "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/08-cursors.js",
          "file": "/lib/async/test/08-cursors.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Cursor API \"before all\" hook",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "fabric = new jsC8_1.Fabric({\n    url: process.env.TEST_C8_URL || \"https://test.macrometa.io\",\n    c8Version: Number(process.env.C8_VERSION || 30400)\n});\nawait fabric.login(\"guest@macrometa.io\", \"guest\");\nfabric.useTenant(\"guest\");",
              "err": {
                "message": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443",
                "estack": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:57:26)",
                "diff": null
              },
              "uuid": "c2f494e6-9633-47de-b58a-21ed5b0b722e",
              "parentUUID": "be03f3e0-72c8-4265-a875-025d0a52b57d",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "Cursor API \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cursor = await fabric.query(c8qlQuery);",
              "err": {},
              "uuid": "e88ecb7f-e5cd-4aeb-843c-d3016e25af87",
              "parentUUID": "be03f3e0-72c8-4265-a875-025d0a52b57d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "Cursor API \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "fabric.close();",
              "err": {},
              "uuid": "085c3c2e-5a66-4c89-a438-b3ca46cec049",
              "parentUUID": "be03f3e0-72c8-4265-a875-025d0a52b57d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "59711ec9-23cd-455f-886e-5b06e1073909",
              "title": "cursor.all",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/08-cursors.js",
              "file": "/lib/async/test/08-cursors.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns an Array of all results",
                  "fullTitle": "Cursor API cursor.all returns an Array of all results",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cursor\n    .all()\n    .then(vals => {\n    chai_1.expect(vals).to.eql(c8qlResult);\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "a98e8dfe-fd1d-4c81-8a4b-16ccad1b7339",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "a98e8dfe-fd1d-4c81-8a4b-16ccad1b7339"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "e02479a7-be12-4991-8b2b-b33768c7896c",
              "title": "cursor.next",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/08-cursors.js",
              "file": "/lib/async/test/08-cursors.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns the next result of the Cursor",
                  "fullTitle": "Cursor API cursor.next returns the next result of the Cursor",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cursor\n    .next()\n    .then(val => {\n    chai_1.expect(val).to.equal(0);\n    return cursor.next();\n})\n    .then(val => {\n    chai_1.expect(val).to.equal(1);\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "3197f1fb-b4b5-471a-9415-b711986b6fe2",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "3197f1fb-b4b5-471a-9415-b711986b6fe2"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "2bfdf968-13cc-4258-a030-00ec2fd1302f",
              "title": "cursor.hasNext",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/08-cursors.js",
              "file": "/lib/async/test/08-cursors.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns true if the Cursor has more results",
                  "fullTitle": "Cursor API cursor.hasNext returns true if the Cursor has more results",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(cursor.hasNext()).to.equal(true);\ncursor\n    .next()\n    .then(val => {\n    chai_1.expect(val).to.be.a(\"number\");\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "89eeb15c-b4ef-4f12-afae-8a4520cbfed8",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "returns false if the Cursor is empty",
                  "fullTitle": "Cursor API cursor.hasNext returns false if the Cursor is empty",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cursor\n    .all()\n    .then(() => {\n    chai_1.expect(cursor.hasNext()).to.equal(false);\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "4edc2e0d-3c81-4b4e-89d6-ad681a505624",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "returns true after first batch is consumed",
                  "fullTitle": "Cursor API cursor.hasNext returns true after first batch is consumed",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "fabric\n    .query(c8qlQuery, {}, { batchSize: 1 })\n    .then(cursor => {\n    chai_1.expect(cursor._result.length).to.equal(1);\n    cursor.next();\n    chai_1.expect(cursor._result.length).to.equal(0);\n    chai_1.expect(cursor.hasNext()).to.equal(true);\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "fba627e9-81fb-4f79-bb20-0db72fa2a9b2",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "returns false after last batch is consumed",
                  "fullTitle": "Cursor API cursor.hasNext returns false after last batch is consumed",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "fabric\n    .query(\"FOR i In 0..1 RETURN i\", {}, { batchSize: 1 })\n    .then(cursor => {\n    chai_1.expect(cursor.hasNext()).to.equal(true);\n    chai_1.expect(cursor._result.length).to.equal(1);\n    cursor\n        .next()\n        .then(val => {\n        chai_1.expect(val).to.equal(0);\n        chai_1.expect(cursor.hasNext()).to.equal(true);\n        chai_1.expect(cursor._result.length).to.equal(0);\n        return cursor.next();\n    })\n        .then(val => {\n        chai_1.expect(val).to.equal(1);\n        chai_1.expect(cursor.hasNext()).to.equal(false);\n        chai_1.expect(cursor._result.length).to.equal(0);\n        done();\n    });\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "fcdea00d-3d9a-4743-a5fd-e7588b105e16",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "returns false after last result is consumed",
                  "fullTitle": "Cursor API cursor.hasNext returns false after last result is consumed",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "fabric\n    .query(\"FOR i In 0..1 RETURN i\")\n    .then(cursor => {\n    chai_1.expect(cursor.hasNext()).to.equal(true);\n    chai_1.expect(cursor._result.length).to.equal(2);\n    cursor\n        .next()\n        .then(val => {\n        chai_1.expect(val).to.equal(0);\n        chai_1.expect(cursor.hasNext()).to.equal(true);\n        chai_1.expect(cursor._result.length).to.equal(1);\n        return cursor.next();\n    })\n        .then(val => {\n        chai_1.expect(val).to.equal(1);\n        chai_1.expect(cursor.hasNext()).to.equal(false);\n        chai_1.expect(cursor._result.length).to.equal(0);\n        done();\n    });\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "cd0a7773-b63c-4694-96bd-21717e3222b9",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "returns 404 after timeout",
                  "fullTitle": "Cursor API cursor.hasNext returns 404 after timeout",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "d8f122f3-c5b9-4bde-8d55-6b5d6d28d59f",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns false after last result is consumed (with large amount of results)",
                  "fullTitle": "Cursor API cursor.hasNext returns false after last result is consumed (with large amount of results)",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "01497e70-67f0-4628-8339-0a432189a4a2",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "d8f122f3-c5b9-4bde-8d55-6b5d6d28d59f",
                "01497e70-67f0-4628-8339-0a432189a4a2"
              ],
              "skipped": [
                "89eeb15c-b4ef-4f12-afae-8a4520cbfed8",
                "4edc2e0d-3c81-4b4e-89d6-ad681a505624",
                "fba627e9-81fb-4f79-bb20-0db72fa2a9b2",
                "fcdea00d-3d9a-4743-a5fd-e7588b105e16",
                "cd0a7773-b63c-4694-96bd-21717e3222b9"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "0a630a11-b1c4-4006-be58-da8e56739bdc",
              "title": "cursor.each",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/08-cursors.js",
              "file": "/lib/async/test/08-cursors.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "invokes the callback for each value",
                  "fullTitle": "Cursor API cursor.each invokes the callback for each value",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let results = [];\ncursor\n    .each(value => {\n    results.push(value);\n})\n    .then(() => {\n    chai_1.expect(results).to.eql(c8qlResult);\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "dd961b2f-52fe-409d-ac06-218ae51bef49",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "aborts if the callback returns false",
                  "fullTitle": "Cursor API cursor.each aborts if the callback returns false",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let results = [];\ncursor\n    .each((value) => {\n    results.push(value);\n    if (value === 5)\n        return false;\n    return;\n})\n    .then(() => {\n    chai_1.expect(results).to.eql([0, 1, 2, 3, 4, 5]);\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "1ec8d870-4c66-49cd-a2c4-8475739fd6c1",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "dd961b2f-52fe-409d-ac06-218ae51bef49",
                "1ec8d870-4c66-49cd-a2c4-8475739fd6c1"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "404d34e7-c1a2-4547-9a14-8fd5f009d895",
              "title": "cursor.every",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/08-cursors.js",
              "file": "/lib/async/test/08-cursors.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns true if the callback returns a truthy value for every item",
                  "fullTitle": "Cursor API cursor.every returns true if the callback returns a truthy value for every item",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let results = [];\ncursor\n    .every(value => {\n    if (results.indexOf(value) !== -1)\n        return false;\n    results.push(value);\n    return true;\n})\n    .then(result => {\n    chai_1.expect(results).to.eql(c8qlResult);\n    chai_1.expect(result).to.equal(true);\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "d5c64611-d6df-48c8-a9fb-9e7528dfbdf1",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "returns false if the callback returns a non-truthy value for any item",
                  "fullTitle": "Cursor API cursor.every returns false if the callback returns a non-truthy value for any item",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let results = [];\ncursor\n    .every(value => {\n    results.push(value);\n    return value < 5;\n})\n    .then((result) => {\n    chai_1.expect(results).to.eql([0, 1, 2, 3, 4, 5]);\n    chai_1.expect(result).to.equal(false);\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "fc05151e-dc6f-4f3c-8693-1f3f552a4838",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "d5c64611-d6df-48c8-a9fb-9e7528dfbdf1",
                "fc05151e-dc6f-4f3c-8693-1f3f552a4838"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "3bb982c4-34e6-4e43-8774-9d14158174ca",
              "title": "cursor.some",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/08-cursors.js",
              "file": "/lib/async/test/08-cursors.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns false if the callback returns a non-truthy value for every item",
                  "fullTitle": "Cursor API cursor.some returns false if the callback returns a non-truthy value for every item",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let results = [];\ncursor\n    .some(value => {\n    if (results.indexOf(value) !== -1)\n        return true;\n    results.push(value);\n    return false;\n})\n    .then(result => {\n    chai_1.expect(results).to.eql(c8qlResult);\n    chai_1.expect(result).to.equal(false);\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "6e429a90-72ae-4c9b-806a-552b9b281d22",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "returns true if the callback returns a truthy value for any item",
                  "fullTitle": "Cursor API cursor.some returns true if the callback returns a truthy value for any item",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let results = [];\ncursor\n    .some(value => {\n    results.push(value);\n    return value >= 5;\n})\n    .then((result) => {\n    chai_1.expect(results).to.eql([0, 1, 2, 3, 4, 5]);\n    chai_1.expect(result).to.equal(true);\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "5c91caf3-7723-477b-acb4-1ff53423a75a",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "6e429a90-72ae-4c9b-806a-552b9b281d22",
                "5c91caf3-7723-477b-acb4-1ff53423a75a"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "37560aa1-a7e2-4082-b2c4-ff5369c2eefa",
              "title": "cursor.map",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/08-cursors.js",
              "file": "/lib/async/test/08-cursors.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "maps all result values over the callback",
                  "fullTitle": "Cursor API cursor.map maps all result values over the callback",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cursor\n    .map(value => value * 2)\n    .then(results => {\n    chai_1.expect(results).to.eql(c8qlResult.map(value => value * 2));\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "b7aedbd4-cc15-40de-82bb-280216a53a9b",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "b7aedbd4-cc15-40de-82bb-280216a53a9b"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "2fcf2528-cdb1-40a3-a9ea-ab3b000c7387",
              "title": "cursor.reduce",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/08-cursors.js",
              "file": "/lib/async/test/08-cursors.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "reduces the result values with the callback",
                  "fullTitle": "Cursor API cursor.reduce reduces the result values with the callback",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cursor\n    .reduce((a, b) => a + b)\n    .then(result => {\n    chai_1.expect(result).to.eql(c8qlResult.reduce((a, b) => a + b));\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "893e7ef2-2ff4-41f1-89a3-4407ff4db614",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "893e7ef2-2ff4-41f1-89a3-4407ff4db614"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "24c8e47b-a32e-4d90-9f52-e512ef718633",
              "title": "cursor.delete",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/08-cursors.js",
              "file": "/lib/async/test/08-cursors.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should delete the cursor",
                  "fullTitle": "Cursor API cursor.delete should delete the cursor",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "915f0a7b-5654-4816-9c0f-a5a730c9590d",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "915f0a7b-5654-4816-9c0f-a5a730c9590d"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "5a95c7b0-3d36-48a3-a7c4-603e4502e2a0",
          "title": "Collection metadata",
          "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/09-collection-metadata.js",
          "file": "/lib/async/test/09-collection-metadata.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Collection metadata \"before all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "fabric = new jsC8_1.Fabric({\n    url: testUrl,\n    c8Version: Number(process.env.C8_VERSION || 30400)\n});\nawait fabric.login(\"guest@macrometa.io\", \"guest\");\nfabric.useTenant(\"guest\");\nconst response = await fabric.getAllEdgeLocations();\ndcList = helper_1.getDCListString(response);\nawait fabric.createFabric(dbName, [{ username: \"root\" }], {\n    dcList: dcList\n});\nfabric.useFabric(dbName);\ncollection = fabric.collection(collectionName);\nawait collection.create();",
              "err": {
                "message": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443",
                "estack": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:57:26)",
                "diff": null
              },
              "uuid": "26d8125d-37f8-4e38-adc9-761050e7d7c8",
              "parentUUID": "5a95c7b0-3d36-48a3-a7c4-603e4502e2a0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "Collection metadata \"after all\" hook",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "fabric.useFabric(\"_system\");\nawait fabric.dropFabric(dbName);",
              "err": {
                "message": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443",
                "estack": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:57:26)",
                "diff": null
              },
              "uuid": "62ef213a-37e9-4fcc-a41e-c2f98f44242d",
              "parentUUID": "5a95c7b0-3d36-48a3-a7c4-603e4502e2a0",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "1be355ab-e8e9-4991-93a4-1c3dc79edc3c",
              "title": "collection.get",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/09-collection-metadata.js",
              "file": "/lib/async/test/09-collection-metadata.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return information about a collection",
                  "fullTitle": "Collection metadata collection.get should return information about a collection",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const info = await collection.get();\nchai_1.expect(info).to.have.property(\"name\", collectionName);\nchai_1.expect(info).to.have.property(\"isSystem\", false);\nchai_1.expect(info).to.have.property(\"status\", 3); // loaded\nchai_1.expect(info).to.have.property(\"type\", 2); // document collection",
                  "err": {},
                  "uuid": "60e089be-8a2a-41b6-af95-9446eb7e578a",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should throw if collection does not exist",
                  "fullTitle": "Collection metadata collection.get should throw if collection does not exist",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "try {\n    await fabric.collection(\"no\").get();\n}\ncatch (e) {\n    chai_1.expect(e).to.have.property(\"errorNum\", collection_1.COLLECTION_NOT_FOUND);\n    return;\n}\nchai_1.expect.fail(\"should throw\");",
                  "err": {},
                  "uuid": "0e1ce9bd-cd76-4801-97f9-72ad32377056",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "60e089be-8a2a-41b6-af95-9446eb7e578a",
                "0e1ce9bd-cd76-4801-97f9-72ad32377056"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "581c501e-ffd7-46a2-b55a-e88255991251",
              "title": "collection.exists",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/09-collection-metadata.js",
              "file": "/lib/async/test/09-collection-metadata.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true if collection exists",
                  "fullTitle": "Collection metadata collection.exists should return true if collection exists",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const exists = await collection.exists();\nchai_1.expect(exists).to.equal(true);",
                  "err": {},
                  "uuid": "2eaa68d2-e71d-405b-8957-d57c8f75bd31",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should return false if collection does not exist",
                  "fullTitle": "Collection metadata collection.exists should return false if collection does not exist",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const exists = await fabric.collection(\"no\").exists();\nchai_1.expect(exists).to.equal(false);",
                  "err": {},
                  "uuid": "1081da5d-ac67-4640-8876-2c405358973a",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "2eaa68d2-e71d-405b-8957-d57c8f75bd31",
                "1081da5d-ac67-4640-8876-2c405358973a"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "370c425e-09ee-422f-8bce-bad81950120b",
              "title": "collection.properties",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/09-collection-metadata.js",
              "file": "/lib/async/test/09-collection-metadata.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return properties of a collection",
                  "fullTitle": "Collection metadata collection.properties should return properties of a collection",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "collection\n    .properties()\n    .then(properties => {\n    chai_1.expect(properties).to.have.property(\"name\", collectionName);\n    chai_1.expect(properties).to.have.property(\"waitForSync\", false);\n})\n    .then(() => done())\n    .catch(done);",
                  "err": {},
                  "uuid": "192ab55e-014c-4eb9-9a7a-1fe1c4996cc3",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "192ab55e-014c-4eb9-9a7a-1fe1c4996cc3"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "1b61a7a6-7ede-4cc4-a9ea-262a98654434",
              "title": "collection.count",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/09-collection-metadata.js",
              "file": "/lib/async/test/09-collection-metadata.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return information about a collection",
                  "fullTitle": "Collection metadata collection.count should return information about a collection",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "collection\n    .count()\n    .then(info => {\n    chai_1.expect(info).to.have.property(\"name\", collectionName);\n    chai_1.expect(info).to.have.property(\"count\", 0);\n})\n    .then(() => done())\n    .catch(done);",
                  "err": {},
                  "uuid": "9ab86950-a5a5-4bb3-a38a-453679f29f8c",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "9ab86950-a5a5-4bb3-a38a-453679f29f8c"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "39c59eef-9dd0-4224-afc4-65cf7f65ad58",
          "title": "Manipulating collections",
          "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/10-manipulating-collections.js",
          "file": "/lib/async/test/10-manipulating-collections.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Manipulating collections \"before all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "fabric = new jsC8_1.Fabric({\n    url: testUrl,\n    c8Version: C8_VERSION\n});\nawait fabric.login(\"guest@macrometa.io\", \"guest\");\nfabric.useTenant(\"guest\");\nconst response = await fabric.getAllEdgeLocations();\ndcList = helper_1.getDCListString(response);\nawait fabric.createFabric(name, [{ username: \"root\" }], { dcList: dcList });\nfabric.useFabric(name);",
              "err": {
                "message": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443",
                "estack": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:57:26)",
                "diff": null
              },
              "uuid": "7a8f6f8f-3705-4afa-bb77-ea1f9ff00869",
              "parentUUID": "39c59eef-9dd0-4224-afc4-65cf7f65ad58",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "Manipulating collections \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "collection = fabric.collection(`collection${Date.now()}`);\ncollection\n    .create()\n    .then(() => void done())\n    .catch(done);",
              "err": {},
              "uuid": "4da53da2-9176-4b8b-93d9-ee0ceb87058d",
              "parentUUID": "39c59eef-9dd0-4224-afc4-65cf7f65ad58",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "Manipulating collections \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "try {\n    fabric.useFabric(\"_system\");\n    await fabric.dropFabric(name);\n}\nfinally {\n    fabric.close();\n}",
              "err": {
                "message": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443",
                "estack": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:57:26)",
                "diff": null
              },
              "uuid": "f1de6a11-d162-4985-970e-88f6c0706002",
              "parentUUID": "39c59eef-9dd0-4224-afc4-65cf7f65ad58",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "Manipulating collections \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "collection\n    .get()\n    .then(() => {\n    collection\n        .drop()\n        .then(() => void done())\n        .catch(done);\n})\n    .catch(() => void done());",
              "err": {},
              "uuid": "8dc6aebc-3823-4a15-be7f-b79e2b6c4533",
              "parentUUID": "39c59eef-9dd0-4224-afc4-65cf7f65ad58",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "6879b6ec-01c3-4191-9f4f-cf7d2b8803ed",
              "title": "collection.create",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/10-manipulating-collections.js",
              "file": "/lib/async/test/10-manipulating-collections.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "creates a new document collection",
                  "fullTitle": "Manipulating collections collection.create creates a new document collection",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const collection = fabric.collection(`documentcollection${Date.now()}`);\ncollection\n    .create()\n    .then(() => {\n    return fabric\n        .collection(collection.name)\n        .get()\n        .then(info => {\n        chai_1.expect(info).to.have.property(\"name\", collection.name);\n        chai_1.expect(info).to.have.property(\"isSystem\", false);\n        chai_1.expect(info).to.have.property(\"status\", 3); // loaded\n        chai_1.expect(info).to.have.property(\"type\", 2); // document collection\n    });\n})\n    .then(() => void done())\n    .catch(done);",
                  "err": {},
                  "uuid": "b37b95f0-a908-49ed-9b68-7bef9a8f20b9",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "creates a new local document collection",
                  "fullTitle": "Manipulating collections collection.create creates a new local document collection",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const collection = fabric.collection(`documentcollection${Date.now()}`);\ncollection\n    .create({ isLocal: true })\n    .then(() => {\n    return fabric\n        .collection(collection.name)\n        .get()\n        .then(info => {\n        chai_1.expect(info).to.have.property(\"name\", collection.name);\n        chai_1.expect(info).to.have.property(\"isSystem\", false);\n        chai_1.expect(info).to.have.property(\"status\", 3); // loaded\n        chai_1.expect(info).to.have.property(\"type\", 2); // document collection\n        chai_1.expect(info).to.have.property(\"isLocal\", true); // local geo-distribution\n    });\n})\n    .then(() => void done())\n    .catch(done);",
                  "err": {},
                  "uuid": "94a8dfe8-aca7-467e-bb27-02eaa648dd94",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "creates a new edge collection",
                  "fullTitle": "Manipulating collections collection.create creates a new edge collection",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const collection = fabric.edgeCollection(`edgecollection${Date.now()}`);\ncollection\n    .create()\n    .then(() => {\n    return fabric\n        .collection(collection.name)\n        .get()\n        .then(info => {\n        chai_1.expect(info).to.have.property(\"name\", collection.name);\n        chai_1.expect(info).to.have.property(\"isSystem\", false);\n        chai_1.expect(info).to.have.property(\"status\", 3); // loaded\n        chai_1.expect(info).to.have.property(\"type\", 3); // edge collection\n    });\n})\n    .then(() => void done())\n    .catch(done);",
                  "err": {},
                  "uuid": "107dc602-70e4-4db7-910d-4213cc53ef2a",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "creates a new local edge collection",
                  "fullTitle": "Manipulating collections collection.create creates a new local edge collection",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const collection = fabric.edgeCollection(`edgecollection${Date.now()}`);\ncollection\n    .create({ isLocal: true })\n    .then(() => {\n    return fabric\n        .collection(collection.name)\n        .get()\n        .then(info => {\n        chai_1.expect(info).to.have.property(\"name\", collection.name);\n        chai_1.expect(info).to.have.property(\"isSystem\", false);\n        chai_1.expect(info).to.have.property(\"status\", 3); // loaded\n        chai_1.expect(info).to.have.property(\"type\", 3); // edge collection\n        chai_1.expect(info).to.have.property(\"isLocal\", true); // local geo-distribution\n    });\n})\n    .then(() => void done())\n    .catch(done);",
                  "err": {},
                  "uuid": "68428cd5-cc91-4788-8f8b-875052523e7e",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "b37b95f0-a908-49ed-9b68-7bef9a8f20b9",
                "94a8dfe8-aca7-467e-bb27-02eaa648dd94",
                "107dc602-70e4-4db7-910d-4213cc53ef2a",
                "68428cd5-cc91-4788-8f8b-875052523e7e"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "652e7315-a4d3-4824-ada0-911075ad5535",
              "title": "collection.rename",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/10-manipulating-collections.js",
              "file": "/lib/async/test/10-manipulating-collections.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should rename a collection",
                  "fullTitle": "Manipulating collections collection.rename should rename a collection",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "fabric\n    .route(\"/_admin/server/role\")\n    .get()\n    .then(res => {\n    if (res.body.role !== \"SINGLE\")\n        return;\n    const name = `renamecollection${Date.now()}`;\n    return collection.rename(name).then(info => {\n        chai_1.expect(info).to.have.property(\"name\", name);\n    });\n})\n    .then(() => void done())\n    .catch(done);",
                  "err": {},
                  "uuid": "d72c6631-4b19-4804-818e-61136f325f6a",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "d72c6631-4b19-4804-818e-61136f325f6a"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "46b41dd4-ef9f-4ae0-8176-cfc35d88c18d",
              "title": "collection.truncate",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/10-manipulating-collections.js",
              "file": "/lib/async/test/10-manipulating-collections.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should truncate a non-empty collection",
                  "fullTitle": "Manipulating collections collection.truncate should truncate a non-empty collection",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "collection.save({}).then(() => {\n    return collection\n        .truncate()\n        .then(() => {\n        collection.count().then(info => {\n            chai_1.expect(info).to.have.property(\"name\", collection.name);\n            chai_1.expect(info).to.have.property(\"count\", 0);\n        });\n    })\n        .then(() => void done())\n        .catch(done);\n});",
                  "err": {},
                  "uuid": "b91e2d37-28d3-4f1d-8ee7-9a1780e66478",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should allow truncating a empty collection",
                  "fullTitle": "Manipulating collections collection.truncate should allow truncating a empty collection",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "collection.truncate().then(() => {\n    return collection\n        .count()\n        .then(info => {\n        chai_1.expect(info).to.have.property(\"name\", collection.name);\n        chai_1.expect(info).to.have.property(\"count\", 0);\n    })\n        .then(() => void done())\n        .catch(done);\n});",
                  "err": {},
                  "uuid": "6160934f-adf0-4e14-8412-e205f8696a73",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "b91e2d37-28d3-4f1d-8ee7-9a1780e66478",
                "6160934f-adf0-4e14-8412-e205f8696a73"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "8e6a34ad-9487-415f-880d-1eb931f32047",
              "title": "collection.drop",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/10-manipulating-collections.js",
              "file": "/lib/async/test/10-manipulating-collections.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should drop a collection",
                  "fullTitle": "Manipulating collections collection.drop should drop a collection",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "collection.drop().then(() => {\n    return collection\n        .get()\n        .then(done)\n        .catch(err => {\n        chai_1.expect(err).to.have.property(\"errorNum\", 1203);\n        void done();\n    });\n});",
                  "err": {},
                  "uuid": "b0b86b3d-0c4f-4b79-bf5c-30742a09f662",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "b0b86b3d-0c4f-4b79-bf5c-30742a09f662"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "fc2a9549-44ce-46d0-b323-a6b9689af998",
              "title": "collection.onChange",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/10-manipulating-collections.js",
              "file": "/lib/async/test/10-manipulating-collections.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get the message on collection change",
                  "fullTitle": "Manipulating collections collection.onChange should get the message on collection change",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const handler = collection.onChange(testUrl.substring(8));\nhandler.on('open', () => {\n    collection.save({ name: \"Anthony\", lastname: \"Gonsalvis\" });\n});\nhandler.on('message', (msg) => {\n    console.log(\"msg=>\", msg);\n    done();\n});\nhandler.on('error', (err) => {\n    console.log(\"Connection Error->\", err);\n    chai_1.expect.fail(\"Websocket connection error\");\n});\nhandler.on('close', () => console.log(\"Websoket connection closed\"));",
                  "err": {},
                  "uuid": "d0fea2c0-b385-4f5f-a890-3a474f01b63f",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "d0fea2c0-b385-4f5f-a890-3a474f01b63f"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "dc395b9f-5aac-444f-921e-1cc0078b17c1",
          "title": "Managing indexes",
          "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/11-managing-indexes.js",
          "file": "/lib/async/test/11-managing-indexes.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Managing indexes \"before all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "fabric = new jsC8_1.Fabric({\n    url: testUrl,\n    c8Version: C8_VERSION\n});\nawait fabric.login(\"guest@macrometa.io\", \"guest\");\nfabric.useTenant(\"guest\");\nconst response = await fabric.getAllEdgeLocations();\ndcList = helper_1.getDCListString(response);\nawait fabric.createFabric(dbName, [{ username: \"root\" }], {\n    dcList: dcList\n});\nfabric.useFabric(dbName);\ncollection = fabric.collection(collectionName);\nawait collection.create();",
              "err": {
                "message": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443",
                "estack": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:57:26)",
                "diff": null
              },
              "uuid": "bc93182b-bd61-40d9-b86c-1a1d05c67bf3",
              "parentUUID": "dc395b9f-5aac-444f-921e-1cc0078b17c1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "Managing indexes \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "try {\n    fabric.useFabric(\"_system\");\n    await fabric.dropFabric(dbName);\n}\nfinally {\n    fabric.close();\n}",
              "err": {
                "message": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443",
                "estack": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:57:26)",
                "diff": null
              },
              "uuid": "b2c8899a-40ee-49f0-9bcd-409336af0de9",
              "parentUUID": "dc395b9f-5aac-444f-921e-1cc0078b17c1",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "408ba741-6961-4601-8460-6fd89bf0d4ab",
              "title": "collection.createIndex",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/11-managing-indexes.js",
              "file": "/lib/async/test/11-managing-indexes.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a index of given type",
                  "fullTitle": "Managing indexes collection.createIndex should create a index of given type",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "collection\n    .createIndex({\n    type: \"hash\",\n    fields: [\"value0\"]\n})\n    .then(info => {\n    chai_1.expect(info).to.have.property(\"id\");\n    chai_1.expect(info).to.have.property(\"type\", \"hash\");\n    chai_1.expect(info).to.have.property(\"fields\");\n    chai_1.expect(info.fields).to.eql([\"value0\"]);\n    chai_1.expect(info).to.have.property(\"isNewlyCreated\", true);\n})\n    .then(() => done())\n    .catch(done);",
                  "err": {},
                  "uuid": "e05866de-e6af-4be9-a94a-f7c661265250",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "e05866de-e6af-4be9-a94a-f7c661265250"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "b1ed5737-b83e-47c0-a44d-b6031ddf83f4",
              "title": "collection.createHashIndex",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/11-managing-indexes.js",
              "file": "/lib/async/test/11-managing-indexes.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a hash index",
                  "fullTitle": "Managing indexes collection.createHashIndex should create a hash index",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "collection\n    .createHashIndex([\"value\"])\n    .then(info => {\n    chai_1.expect(info).to.have.property(\"id\");\n    chai_1.expect(info).to.have.property(\"type\", \"hash\");\n    chai_1.expect(info).to.have.property(\"fields\");\n    chai_1.expect(info.fields).to.eql([\"value\"]);\n    chai_1.expect(info).to.have.property(\"isNewlyCreated\", true);\n})\n    .then(() => done())\n    .catch(done);",
                  "err": {},
                  "uuid": "fd02a304-7ff6-4d3c-b309-7b057865c00e",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "fd02a304-7ff6-4d3c-b309-7b057865c00e"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "b3aa2e6d-6e9b-4403-88b1-cac1942fa789",
              "title": "collection.createSkipList",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/11-managing-indexes.js",
              "file": "/lib/async/test/11-managing-indexes.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a skiplist index",
                  "fullTitle": "Managing indexes collection.createSkipList should create a skiplist index",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "collection\n    .createSkipList([\"value\"])\n    .then(info => {\n    chai_1.expect(info).to.have.property(\"id\");\n    chai_1.expect(info).to.have.property(\"type\", \"skiplist\");\n    chai_1.expect(info).to.have.property(\"fields\");\n    chai_1.expect(info.fields).to.eql([\"value\"]);\n    chai_1.expect(info).to.have.property(\"isNewlyCreated\", true);\n})\n    .then(() => done())\n    .catch(done);",
                  "err": {},
                  "uuid": "5f99e465-cd81-420d-bae1-9c8d85722a4d",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "5f99e465-cd81-420d-bae1-9c8d85722a4d"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "f154c866-a300-45ff-83cc-419a6a46dff4",
              "title": "collection.createPersistentIndex",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/11-managing-indexes.js",
              "file": "/lib/async/test/11-managing-indexes.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a persistent index",
                  "fullTitle": "Managing indexes collection.createPersistentIndex should create a persistent index",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "collection\n    .createPersistentIndex([\"value\"])\n    .then(info => {\n    chai_1.expect(info).to.have.property(\"id\");\n    chai_1.expect(info).to.have.property(\"type\", \"persistent\");\n    chai_1.expect(info).to.have.property(\"fields\");\n    chai_1.expect(info.fields).to.eql([\"value\"]);\n    chai_1.expect(info).to.have.property(\"isNewlyCreated\", true);\n})\n    .then(() => done())\n    .catch(done);",
                  "err": {},
                  "uuid": "76081f27-35ff-4841-a0d3-a45d5e06e449",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "76081f27-35ff-4841-a0d3-a45d5e06e449"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "7d137a86-5248-408f-88a3-72be52345060",
              "title": "collection.createGeoIndex",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/11-managing-indexes.js",
              "file": "/lib/async/test/11-managing-indexes.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a geo1 index for one field",
                  "fullTitle": "Managing indexes collection.createGeoIndex should create a geo1 index for one field",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "63cd34d6-af81-4405-9b36-6087ac4de970",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should create a geo2 index for two fields",
                  "fullTitle": "Managing indexes collection.createGeoIndex should create a geo2 index for two fields",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "b29c8ecf-dca6-48a4-ad64-f536a45f2f67",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should create a geo index for one field",
                  "fullTitle": "Managing indexes collection.createGeoIndex should create a geo index for one field",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "collection\n    .createGeoIndex([\"value\"])\n    .then(info => {\n    chai_1.expect(info).to.have.property(\"id\");\n    chai_1.expect(info).to.have.property(\"type\", \"geo\");\n    chai_1.expect(info).to.have.property(\"fields\");\n    chai_1.expect(info.fields).to.eql([\"value\"]);\n    chai_1.expect(info).to.have.property(\"isNewlyCreated\", true);\n})\n    .then(() => done())\n    .catch(done);",
                  "err": {},
                  "uuid": "ddf45088-5877-4c4a-8b6c-edf9fa779f4c",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should create a geo index for two fields",
                  "fullTitle": "Managing indexes collection.createGeoIndex should create a geo index for two fields",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "collection\n    .createGeoIndex([\"value1\", \"value2\"])\n    .then(info => {\n    chai_1.expect(info).to.have.property(\"id\");\n    chai_1.expect(info).to.have.property(\"type\", \"geo\");\n    chai_1.expect(info).to.have.property(\"fields\");\n    chai_1.expect(info.fields).to.eql([\"value1\", \"value2\"]);\n    chai_1.expect(info).to.have.property(\"isNewlyCreated\", true);\n})\n    .then(() => done())\n    .catch(done);",
                  "err": {},
                  "uuid": "7e12a264-7dd9-426d-9dce-f624032236f0",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "63cd34d6-af81-4405-9b36-6087ac4de970",
                "b29c8ecf-dca6-48a4-ad64-f536a45f2f67"
              ],
              "skipped": [
                "ddf45088-5877-4c4a-8b6c-edf9fa779f4c",
                "7e12a264-7dd9-426d-9dce-f624032236f0"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "77830994-1a09-42da-b129-476ad4adaf27",
              "title": "collection.createFulltextIndex",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/11-managing-indexes.js",
              "file": "/lib/async/test/11-managing-indexes.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a fulltext index",
                  "fullTitle": "Managing indexes collection.createFulltextIndex should create a fulltext index",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "collection\n    .createFulltextIndex([\"value\"])\n    .then(info => {\n    chai_1.expect(info).to.have.property(\"id\");\n    chai_1.expect(info).to.have.property(\"type\", \"fulltext\");\n    chai_1.expect(info).to.have.property(\"fields\");\n    chai_1.expect(info.fields).to.eql([\"value\"]);\n    chai_1.expect(info).to.have.property(\"isNewlyCreated\", true);\n})\n    .then(() => done())\n    .catch(done);",
                  "err": {},
                  "uuid": "a4f57b74-5db4-4294-bb08-4dce822ca242",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "a4f57b74-5db4-4294-bb08-4dce822ca242"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "9ef46098-6839-4dd9-8173-3e742b83bb39",
              "title": "collection.index",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/11-managing-indexes.js",
              "file": "/lib/async/test/11-managing-indexes.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return information about a index",
                  "fullTitle": "Managing indexes collection.index should return information about a index",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "collection\n    .createHashIndex([\"test\"])\n    .then(info => {\n    return collection.index(info.id).then(index => {\n        chai_1.expect(index).to.have.property(\"id\", info.id);\n        chai_1.expect(index).to.have.property(\"type\", info.type);\n    });\n})\n    .then(() => done())\n    .catch(done);",
                  "err": {},
                  "uuid": "437f8108-10d0-42bc-97ec-8b95502b9e5f",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "437f8108-10d0-42bc-97ec-8b95502b9e5f"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "c0fdb637-e030-4e58-820d-defb1aebbe3f",
              "title": "collection.indexes",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/11-managing-indexes.js",
              "file": "/lib/async/test/11-managing-indexes.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a list of indexes",
                  "fullTitle": "Managing indexes collection.indexes should return a list of indexes",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "collection\n    .createHashIndex([\"test\"])\n    .then(index => {\n    return collection.indexes().then(indexes => {\n        chai_1.expect(indexes).to.be.instanceof(Array);\n        chai_1.expect(indexes).to.not.be.empty;\n        chai_1.expect(indexes.filter((i) => i.id === index.id).length).to.equal(1);\n    });\n})\n    .then(() => done())\n    .catch(done);",
                  "err": {},
                  "uuid": "27951e05-1baa-4099-a3bd-d9fe8a85a252",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "27951e05-1baa-4099-a3bd-d9fe8a85a252"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "a3462b67-0fc2-4156-a15d-b112e21e5896",
              "title": "collection.dropIndex",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/11-managing-indexes.js",
              "file": "/lib/async/test/11-managing-indexes.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should drop existing index",
                  "fullTitle": "Managing indexes collection.dropIndex should drop existing index",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "collection\n    .createHashIndex([\"test\"])\n    .then(info => {\n    return collection.dropIndex(info.id).then(index => {\n        chai_1.expect(index).to.have.property(\"id\", info.id);\n        return collection.indexes().then(indexes => {\n            chai_1.expect(indexes).to.be.instanceof(Array);\n            chai_1.expect(indexes).to.not.be.empty;\n            chai_1.expect(indexes.filter((i) => i.id === index.id).length).to.equal(0);\n        });\n    });\n})\n    .then(() => done())\n    .catch(done);",
                  "err": {},
                  "uuid": "ce7eee38-bafe-4ff9-b67d-3f32f214ee19",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "ce7eee38-bafe-4ff9-b67d-3f32f214ee19"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "1a122e8c-cc9a-4d0d-beab-b36b4ff4287e",
          "title": "DocumentCollection API",
          "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/14-document-collections.js",
          "file": "/lib/async/test/14-document-collections.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "DocumentCollection API \"before all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "fabric = new jsC8_1.Fabric({\n    url: testUrl,\n    c8Version: C8_VERSION\n});\nawait fabric.login(\"guest@macrometa.io\", \"guest\");\nfabric.useTenant(\"guest\");\nconst response = await fabric.getAllEdgeLocations();\ndcList = helper_1.getDCListString(response);\nawait fabric.createFabric(name, [{ username: \"root\" }], { dcList: dcList });\nfabric.useFabric(name);",
              "err": {
                "message": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443",
                "estack": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:57:26)",
                "diff": null
              },
              "uuid": "cb574c8f-0abf-4ecb-a1c1-d45d1f86ba86",
              "parentUUID": "1a122e8c-cc9a-4d0d-beab-b36b4ff4287e",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "DocumentCollection API \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "collection = fabric.collection(`c${Date.now()}`);\ncollection\n    .create()\n    .then(() => void done())\n    .catch(done);",
              "err": {},
              "uuid": "300c6b1a-16b6-4791-826b-4bbedea95c42",
              "parentUUID": "1a122e8c-cc9a-4d0d-beab-b36b4ff4287e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "DocumentCollection API \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "try {\n    fabric.useFabric(\"_system\");\n    await fabric.dropFabric(name);\n}\nfinally {\n    fabric.close();\n}",
              "err": {
                "message": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443",
                "estack": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:57:26)",
                "diff": null
              },
              "uuid": "13b90c6c-d13a-4755-a2ff-2b17b534d467",
              "parentUUID": "1a122e8c-cc9a-4d0d-beab-b36b4ff4287e",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "DocumentCollection API \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "collection\n    .drop()\n    .then(() => void done())\n    .catch(done);",
              "err": {},
              "uuid": "8f0e6293-7363-405c-a643-bbd357f19498",
              "parentUUID": "1a122e8c-cc9a-4d0d-beab-b36b4ff4287e",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "41d43cc0-f1aa-4507-8878-12b021bf6a7a",
              "title": "documentCollection.document",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/14-document-collections.js",
              "file": "/lib/async/test/14-document-collections.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "DocumentCollection API documentCollection.document \"before each\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "meta = await collection.save(data);",
                  "err": {},
                  "uuid": "a5c96a09-62f6-4e48-a65e-b3366ef055b4",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns a document in the collection",
                  "fullTitle": "DocumentCollection API documentCollection.document returns a document in the collection",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const doc = await collection.document(meta._id);\nchai_1.expect(doc).to.have.keys(\"_key\", \"_id\", \"_rev\", \"foo\");\nchai_1.expect(doc._id).to.equal(meta._id);\nchai_1.expect(doc._key).to.equal(meta._key);\nchai_1.expect(doc._rev).to.equal(meta._rev);\nchai_1.expect(doc.foo).to.equal(data.foo);",
                  "err": {},
                  "uuid": "b126bf21-e452-4c18-83d6-7ef06eeda6a0",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "does not throw on not found when graceful",
                  "fullTitle": "DocumentCollection API documentCollection.document does not throw on not found when graceful",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const doc = await collection.document(\"doesnotexist\", true);\nchai_1.expect(doc).to.equal(null);",
                  "err": {},
                  "uuid": "f804a081-4fc6-40be-895c-769c08dedc31",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "b126bf21-e452-4c18-83d6-7ef06eeda6a0",
                "f804a081-4fc6-40be-895c-769c08dedc31"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "044ce39a-0636-46ca-ba51-c8800b7409e8",
              "title": "documentCollection.documentExists",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/14-document-collections.js",
              "file": "/lib/async/test/14-document-collections.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "DocumentCollection API documentCollection.documentExists \"before each\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "meta = await collection.save(data);",
                  "err": {},
                  "uuid": "59f016ad-147f-494f-8e84-ab4cd479fd6d",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns true if the document exists",
                  "fullTitle": "DocumentCollection API documentCollection.documentExists returns true if the document exists",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const exists = await collection.documentExists(meta._id);\nchai_1.expect(exists).to.equal(true);",
                  "err": {},
                  "uuid": "655242ae-17b5-4932-b08b-be38c702a8e3",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "returns false if the document does not exist",
                  "fullTitle": "DocumentCollection API documentCollection.documentExists returns false if the document does not exist",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const exists = await collection.documentExists(\"does-not-exist\");\nchai_1.expect(exists).to.equal(false);",
                  "err": {},
                  "uuid": "da332910-0631-491a-a583-596d87c63b70",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "returns false if the collection does not exist",
                  "fullTitle": "DocumentCollection API documentCollection.documentExists returns false if the collection does not exist",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const exists = await fabric\n    .collection(\"doesnotexist\")\n    .documentExists(\"lol\");\nchai_1.expect(exists).to.equal(false);",
                  "err": {},
                  "uuid": "cebd436c-714b-49dc-b289-6468c559e3b2",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "655242ae-17b5-4932-b08b-be38c702a8e3",
                "da332910-0631-491a-a583-596d87c63b70",
                "cebd436c-714b-49dc-b289-6468c559e3b2"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "86bf87e2-b810-4d4d-b71b-b514f80e563d",
              "title": "documentCollection.save",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/14-document-collections.js",
              "file": "/lib/async/test/14-document-collections.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "creates a document in the collection",
                  "fullTitle": "DocumentCollection API documentCollection.save creates a document in the collection",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let data = { foo: \"bar\" };\ncollection\n    .save(data)\n    .then(meta => {\n    chai_1.expect(meta).to.be.an(\"object\");\n    chai_1.expect(meta)\n        .to.have.property(\"_id\")\n        .that.is.a(\"string\");\n    chai_1.expect(meta)\n        .to.have.property(\"_rev\")\n        .that.is.a(\"string\");\n    chai_1.expect(meta)\n        .to.have.property(\"_key\")\n        .that.is.a(\"string\");\n    return collection.document(meta._id).then(doc => {\n        chai_1.expect(doc).to.have.keys(\"_key\", \"_id\", \"_rev\", \"foo\");\n        chai_1.expect(doc._id).to.equal(meta._id);\n        chai_1.expect(doc._key).to.equal(meta._key);\n        chai_1.expect(doc._rev).to.equal(meta._rev);\n        chai_1.expect(doc.foo).to.equal(data.foo);\n    });\n})\n    .then(() => void done())\n    .catch(done);",
                  "err": {},
                  "uuid": "13d7654d-e281-4ba3-9a6d-a2e8e415c5f8",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "uses the given _key if provided",
                  "fullTitle": "DocumentCollection API documentCollection.save uses the given _key if provided",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let data = { potato: \"tomato\", _key: \"banana\" };\ncollection\n    .save(data)\n    .then(meta => {\n    chai_1.expect(meta).to.be.an(\"object\");\n    chai_1.expect(meta)\n        .to.have.property(\"_id\")\n        .that.is.a(\"string\");\n    chai_1.expect(meta)\n        .to.have.property(\"_rev\")\n        .that.is.a(\"string\");\n    chai_1.expect(meta)\n        .to.have.property(\"_key\")\n        .that.equals(data._key);\n    return collection.document(meta._id).then(doc => {\n        chai_1.expect(doc).to.have.keys(\"_key\", \"_id\", \"_rev\", \"potato\");\n        chai_1.expect(doc._id).to.equal(meta._id);\n        chai_1.expect(doc._rev).to.equal(meta._rev);\n        chai_1.expect(doc._key).to.equal(data._key);\n        chai_1.expect(doc.potato).to.equal(data.potato);\n    });\n})\n    .then(() => void done())\n    .catch(done);",
                  "err": {},
                  "uuid": "adf5af74-5fef-4757-ac38-e29de3c62fad",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "returns the document if opts.returnNew is set",
                  "fullTitle": "DocumentCollection API documentCollection.save returns the document if opts.returnNew is set",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let data = { potato: \"tomato\" };\nlet opts = { returnNew: true };\ncollection\n    .save(data, opts)\n    .then(meta => {\n    chai_1.expect(meta).to.be.an(\"object\");\n    chai_1.expect(meta)\n        .to.have.property(\"_id\")\n        .that.is.a(\"string\");\n    chai_1.expect(meta)\n        .to.have.property(\"_rev\")\n        .that.is.a(\"string\");\n    chai_1.expect(meta)\n        .to.have.property(\"_key\")\n        .that.is.a(\"string\");\n    chai_1.expect(meta.new).to.be.an(\"object\");\n    chai_1.expect(meta.new)\n        .to.have.property(\"_id\")\n        .that.is.a(\"string\");\n    chai_1.expect(meta.new)\n        .to.have.property(\"_rev\")\n        .that.is.a(\"string\");\n    chai_1.expect(meta.new)\n        .to.have.property(\"_key\")\n        .that.is.a(\"string\");\n    chai_1.expect(meta.new.potato).to.equal(data.potato);\n})\n    .then(() => void done())\n    .catch(done);",
                  "err": {},
                  "uuid": "f6222f7f-bd5f-4ba7-9af8-441051fb3a67",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "interprets opts as returnNew if it is a boolean",
                  "fullTitle": "DocumentCollection API documentCollection.save interprets opts as returnNew if it is a boolean",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let data = { potato: \"tomato\" };\nlet opts = true;\ncollection\n    .save(data, opts)\n    .then(meta => {\n    chai_1.expect(meta).to.be.an(\"object\");\n    chai_1.expect(meta)\n        .to.have.property(\"_id\")\n        .that.is.a(\"string\");\n    chai_1.expect(meta)\n        .to.have.property(\"_rev\")\n        .that.is.a(\"string\");\n    chai_1.expect(meta)\n        .to.have.property(\"_key\")\n        .that.is.a(\"string\");\n    chai_1.expect(meta.new).to.be.an(\"object\");\n    chai_1.expect(meta.new)\n        .to.have.property(\"_id\")\n        .that.is.a(\"string\");\n    chai_1.expect(meta.new)\n        .to.have.property(\"_rev\")\n        .that.is.a(\"string\");\n    chai_1.expect(meta.new)\n        .to.have.property(\"_key\")\n        .that.is.a(\"string\");\n    chai_1.expect(meta.new.potato).to.equal(data.potato);\n})\n    .then(() => void done())\n    .catch(done);",
                  "err": {},
                  "uuid": "a2f0140e-08dc-4de4-9362-5fa025092dbb",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "13d7654d-e281-4ba3-9a6d-a2e8e415c5f8",
                "adf5af74-5fef-4757-ac38-e29de3c62fad",
                "f6222f7f-bd5f-4ba7-9af8-441051fb3a67",
                "a2f0140e-08dc-4de4-9362-5fa025092dbb"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "65246a78-ac43-47b6-9630-ba1e8ec24542",
              "title": "documentCollection.replace",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/14-document-collections.js",
              "file": "/lib/async/test/14-document-collections.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "replaces the given document",
                  "fullTitle": "DocumentCollection API documentCollection.replace replaces the given document",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let doc = { potato: \"tomato\" };\ncollection\n    .save(doc)\n    .then(meta => {\n    delete meta.error;\n    Object.assign(doc, meta);\n    return collection.replace(doc, { sup: \"dawg\" });\n})\n    .then(() => collection.document(doc._key))\n    .then(data => {\n    chai_1.expect(data).not.to.have.property(\"potato\");\n    chai_1.expect(data)\n        .to.have.property(\"sup\")\n        .that.equals(\"dawg\");\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "3cbef31c-e147-43f5-a986-4436514c35c0",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "3cbef31c-e147-43f5-a986-4436514c35c0"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "50a35ab7-30a6-4acf-888d-a0b0f77aa9d1",
              "title": "documentCollection.update",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/14-document-collections.js",
              "file": "/lib/async/test/14-document-collections.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "updates the given document",
                  "fullTitle": "DocumentCollection API documentCollection.update updates the given document",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let doc = { potato: \"tomato\", empty: false };\ncollection\n    .save(doc)\n    .then(meta => {\n    delete meta.error;\n    Object.assign(doc, meta);\n    return collection.update(doc, { sup: \"dawg\", empty: null });\n})\n    .then(() => collection.document(doc._key))\n    .then(data => {\n    chai_1.expect(data)\n        .to.have.property(\"potato\")\n        .that.equals(doc.potato);\n    chai_1.expect(data)\n        .to.have.property(\"sup\")\n        .that.equals(\"dawg\");\n    chai_1.expect(data)\n        .to.have.property(\"empty\")\n        .that.equals(null);\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "0c3cc145-6784-4846-9918-aec40efe0a05",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "removes null values if keepNull is explicitly set to false",
                  "fullTitle": "DocumentCollection API documentCollection.update removes null values if keepNull is explicitly set to false",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let doc = { potato: \"tomato\", empty: false };\ncollection\n    .save(doc)\n    .then(meta => {\n    delete meta.error;\n    Object.assign(doc, meta);\n    return collection.update(doc, { sup: \"dawg\", empty: null }, { keepNull: false });\n})\n    .then(() => collection.document(doc._key))\n    .then(data => {\n    chai_1.expect(data)\n        .to.have.property(\"potato\")\n        .that.equals(doc.potato);\n    chai_1.expect(data)\n        .to.have.property(\"sup\")\n        .that.equals(\"dawg\");\n    chai_1.expect(data).not.to.have.property(\"empty\");\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "7f8a032a-3a37-448b-b518-15dc637ed315",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "0c3cc145-6784-4846-9918-aec40efe0a05",
                "7f8a032a-3a37-448b-b518-15dc637ed315"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "93a8b69e-8e94-44d6-8291-51b075f9132f",
              "title": "documentCollection.remove",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/14-document-collections.js",
              "file": "/lib/async/test/14-document-collections.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "DocumentCollection API documentCollection.remove \"before each\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "collection\n    .save({ _key: key })\n    .then(() => void done())\n    .catch(done);",
                  "err": {},
                  "uuid": "d83a602b-5353-4ff5-aa7c-1b15a84e4b36",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "deletes the given document",
                  "fullTitle": "DocumentCollection API documentCollection.remove deletes the given document",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "collection\n    .remove(key)\n    .then(() => collection.document(key))\n    .then(() => Promise.reject(new Error(\"Should not succeed\")), () => void done())\n    .catch(done);",
                  "err": {},
                  "uuid": "b0593150-6a93-440d-9388-952a5225bf72",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "b0593150-6a93-440d-9388-952a5225bf72"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "3a816705-a91f-4dcc-a951-4d3b40592a05",
          "title": "EdgeCollection API",
          "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/15-edge-collections.js",
          "file": "/lib/async/test/15-edge-collections.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "EdgeCollection API \"before all\" hook",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "fabric = new jsC8_1.Fabric({\n    url: testUrl,\n    c8Version: Number(process.env.C8_VERSION || 30400)\n});\nawait fabric.login(\"guest@macrometa.io\", \"guest\");\nfabric.useTenant(\"guest\");\nconst response = await fabric.getAllEdgeLocations();\ndcList = helper_1.getDCListString(response);\nawait fabric.createFabric(name, [{ username: \"root\" }], { dcList: dcList });\nfabric.useFabric(name);",
              "err": {
                "message": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443",
                "estack": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:57:26)",
                "diff": null
              },
              "uuid": "97b4fbf2-a0c6-4fea-a3a4-14d08841e5df",
              "parentUUID": "3a816705-a91f-4dcc-a951-4d3b40592a05",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "EdgeCollection API \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "collection = fabric.edgeCollection(`c${Date.now()}`);\ncollection\n    .create()\n    .then(() => void done())\n    .catch(done);",
              "err": {},
              "uuid": "7a7637ec-9436-4a48-ae4a-20d22cc1adb6",
              "parentUUID": "3a816705-a91f-4dcc-a951-4d3b40592a05",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "EdgeCollection API \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "try {\n    fabric.useFabric(\"_system\");\n    await fabric.dropFabric(name);\n}\nfinally {\n    fabric.close();\n}",
              "err": {
                "message": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443",
                "estack": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:57:26)",
                "diff": null
              },
              "uuid": "3ffe940b-b428-4951-a759-c35f9d79dc2c",
              "parentUUID": "3a816705-a91f-4dcc-a951-4d3b40592a05",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "EdgeCollection API \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "collection\n    .drop()\n    .then(() => void done())\n    .catch(done);",
              "err": {},
              "uuid": "b74c92b8-fa04-4ab2-b715-224a48b2fecf",
              "parentUUID": "3a816705-a91f-4dcc-a951-4d3b40592a05",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "7339b1af-a74e-43c5-b8b7-ba3e77c0a7ea",
              "title": "edgeCollection.edge",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/15-edge-collections.js",
              "file": "/lib/async/test/15-edge-collections.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "EdgeCollection API edgeCollection.edge \"before each\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "meta = await collection.save(data);",
                  "err": {},
                  "uuid": "06631252-1a85-4c9e-a09d-d0f2166707f3",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns an edge in the collection",
                  "fullTitle": "EdgeCollection API edgeCollection.edge returns an edge in the collection",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const doc = await collection.edge(meta._id);\nchai_1.expect(doc).to.have.keys(\"_key\", \"_id\", \"_rev\", \"_from\", \"_to\");\nchai_1.expect(doc._id).to.equal(meta._id);\nchai_1.expect(doc._key).to.equal(meta._key);\nchai_1.expect(doc._rev).to.equal(meta._rev);\nchai_1.expect(doc._from).to.equal(data._from);\nchai_1.expect(doc._to).to.equal(data._to);",
                  "err": {},
                  "uuid": "9e214330-f730-4fd2-9674-0e1d31e55159",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "does not throw on not found when graceful",
                  "fullTitle": "EdgeCollection API edgeCollection.edge does not throw on not found when graceful",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const doc = await collection.edge(\"doesnotexist\", true);\nchai_1.expect(doc).to.equal(null);",
                  "err": {},
                  "uuid": "5ddccc5c-afd4-44ec-8b50-ed531a892bbd",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "9e214330-f730-4fd2-9674-0e1d31e55159",
                "5ddccc5c-afd4-44ec-8b50-ed531a892bbd"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "4c9ca351-0291-4936-aaa4-54565892bc4a",
              "title": "edgeCollection.document",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/15-edge-collections.js",
              "file": "/lib/async/test/15-edge-collections.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "EdgeCollection API edgeCollection.document \"before each\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "meta = await collection.save(data);",
                  "err": {},
                  "uuid": "8bb8f1e7-9bc0-4fd3-ae29-2d0dc1657120",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns an edge in the collection",
                  "fullTitle": "EdgeCollection API edgeCollection.document returns an edge in the collection",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const doc = await collection.document(meta._id);\nchai_1.expect(doc).to.have.keys(\"_key\", \"_id\", \"_rev\", \"_from\", \"_to\");\nchai_1.expect(doc._id).to.equal(meta._id);\nchai_1.expect(doc._key).to.equal(meta._key);\nchai_1.expect(doc._rev).to.equal(meta._rev);\nchai_1.expect(doc._from).to.equal(data._from);\nchai_1.expect(doc._to).to.equal(data._to);",
                  "err": {},
                  "uuid": "d8fb7bea-f59e-4e54-80c4-fe182a4f7381",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "does not throw on not found when graceful",
                  "fullTitle": "EdgeCollection API edgeCollection.document does not throw on not found when graceful",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const doc = await collection.document(\"doesnotexist\", true);\nchai_1.expect(doc).to.equal(null);",
                  "err": {},
                  "uuid": "a696d92f-9a13-4e01-86cd-64958d8a7dc7",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "d8fb7bea-f59e-4e54-80c4-fe182a4f7381",
                "a696d92f-9a13-4e01-86cd-64958d8a7dc7"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "9c7dbf4e-bba0-49e7-9b22-3b84fd3e1973",
              "title": "edgeCollection.documentExists",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/15-edge-collections.js",
              "file": "/lib/async/test/15-edge-collections.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "EdgeCollection API edgeCollection.documentExists \"before each\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "meta = await collection.save(data);",
                  "err": {},
                  "uuid": "b51c57e9-7fc8-481f-87f2-4f5e52b29b34",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns true if the edge exists",
                  "fullTitle": "EdgeCollection API edgeCollection.documentExists returns true if the edge exists",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const exists = await collection.documentExists(meta._id);\nchai_1.expect(exists).to.equal(true);",
                  "err": {},
                  "uuid": "11120273-29bc-48cc-b743-1a1e813eb4f5",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "returns false if the edge does not exist",
                  "fullTitle": "EdgeCollection API edgeCollection.documentExists returns false if the edge does not exist",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const exists = await collection.documentExists(\"doesnotexist\");\nchai_1.expect(exists).to.equal(false);",
                  "err": {},
                  "uuid": "33a14abb-c38d-4218-9eb2-02259c578545",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "11120273-29bc-48cc-b743-1a1e813eb4f5",
                "33a14abb-c38d-4218-9eb2-02259c578545"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "c5fc0b12-9f30-4a8d-840c-4740a4fcd630",
              "title": "edgeCollection.save",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/15-edge-collections.js",
              "file": "/lib/async/test/15-edge-collections.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "creates an edge in the collection",
                  "fullTitle": "EdgeCollection API edgeCollection.save creates an edge in the collection",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data = { chicken: \"chicken\", _from: \"d/1\", _to: \"d/2\" };\nconst meta = await collection.save(data);\nchai_1.expect(meta).to.be.an(\"object\");\nchai_1.expect(meta)\n    .to.have.property(\"_id\")\n    .that.is.a(\"string\");\nchai_1.expect(meta)\n    .to.have.property(\"_rev\")\n    .that.is.a(\"string\");\nchai_1.expect(meta)\n    .to.have.property(\"_key\")\n    .that.is.a(\"string\");\nconst doc = await collection.edge(meta._id);\nchai_1.expect(doc).to.have.keys(\"chicken\", \"_key\", \"_id\", \"_rev\", \"_from\", \"_to\");\nchai_1.expect(doc._id).to.equal(meta._id);\nchai_1.expect(doc._key).to.equal(meta._key);\nchai_1.expect(doc._rev).to.equal(meta._rev);\nchai_1.expect(doc._from).to.equal(data._from);\nchai_1.expect(doc._to).to.equal(data._to);\nchai_1.expect(doc.chicken).to.equal(data.chicken);",
                  "err": {},
                  "uuid": "85cf9c6f-0c05-4260-8582-c78ed5558547",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "uses the given _key if provided",
                  "fullTitle": "EdgeCollection API edgeCollection.save uses the given _key if provided",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data = {\n    chicken: \"chicken\",\n    _key: \"banana\",\n    _from: \"d/1\",\n    _to: \"d/2\"\n};\nconst meta = await collection.save(data);\nchai_1.expect(meta).to.be.an(\"object\");\nchai_1.expect(meta)\n    .to.have.property(\"_id\")\n    .that.is.a(\"string\");\nchai_1.expect(meta)\n    .to.have.property(\"_rev\")\n    .that.is.a(\"string\");\nchai_1.expect(meta)\n    .to.have.property(\"_key\")\n    .that.equals(data._key);\nconst doc = await collection.edge(meta._id);\nchai_1.expect(doc).to.have.keys(\"chicken\", \"_key\", \"_id\", \"_rev\", \"_from\", \"_to\");\nchai_1.expect(doc._id).to.equal(meta._id);\nchai_1.expect(doc._rev).to.equal(meta._rev);\nchai_1.expect(doc._key).to.equal(data._key);\nchai_1.expect(doc._from).to.equal(data._from);\nchai_1.expect(doc._to).to.equal(data._to);\nchai_1.expect(doc.chicken).to.equal(data.chicken);",
                  "err": {},
                  "uuid": "53accadc-279b-46a7-b7e8-fd9dfa54a11f",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "takes _from and _to as positional arguments",
                  "fullTitle": "EdgeCollection API edgeCollection.save takes _from and _to as positional arguments",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data = { chicken: \"chicken\" };\nconst from = \"d/1\";\nconst to = \"d/2\";\nconst meta = await collection.save(data, from, to);\nchai_1.expect(meta).to.be.an(\"object\");\nchai_1.expect(meta)\n    .to.have.property(\"_id\")\n    .that.is.a(\"string\");\nchai_1.expect(meta)\n    .to.have.property(\"_rev\")\n    .that.is.a(\"string\");\nchai_1.expect(meta)\n    .to.have.property(\"_key\")\n    .that.is.a(\"string\");\nconst doc = await collection.edge(meta._id);\nchai_1.expect(doc).to.have.keys(\"chicken\", \"_key\", \"_id\", \"_rev\", \"_from\", \"_to\");\nchai_1.expect(doc.chicken).to.equal(data.chicken);\nchai_1.expect(doc._id).to.equal(meta._id);\nchai_1.expect(doc._key).to.equal(meta._key);\nchai_1.expect(doc._rev).to.equal(meta._rev);\nchai_1.expect(doc._from).to.equal(from);\nchai_1.expect(doc._to).to.equal(to);",
                  "err": {},
                  "uuid": "dcef8c15-b363-45ef-a115-d64bf3dbbf8e",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "takes an options object",
                  "fullTitle": "EdgeCollection API edgeCollection.save takes an options object",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data = { chicken: \"chicken\", _from: \"d/1\", _to: \"d/2\" };\nconst meta = await collection.save(data, { returnNew: true });\nchai_1.expect(meta).to.be.an(\"object\");\nchai_1.expect(meta)\n    .to.have.property(\"_id\")\n    .that.is.a(\"string\");\nchai_1.expect(meta)\n    .to.have.property(\"_rev\")\n    .that.is.a(\"string\");\nchai_1.expect(meta)\n    .to.have.property(\"_key\")\n    .that.is.a(\"string\");\nchai_1.expect(meta)\n    .to.have.property(\"new\")\n    .that.is.an(\"object\");\nchai_1.expect(meta.new).to.have.property(\"chicken\", data.chicken);\nconst doc = await collection.edge(meta._id);\nchai_1.expect(doc).to.have.keys(\"chicken\", \"_key\", \"_id\", \"_rev\", \"_from\", \"_to\");\nchai_1.expect(doc.chicken).to.equal(data.chicken);\nchai_1.expect(doc._id).to.equal(meta._id);\nchai_1.expect(doc._key).to.equal(meta._key);\nchai_1.expect(doc._rev).to.equal(meta._rev);\nchai_1.expect(doc._from).to.equal(data._from);\nchai_1.expect(doc._to).to.equal(data._to);",
                  "err": {},
                  "uuid": "5300f003-5c3b-4ee0-a5bb-abd9788d8300",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "takes an options object with positional _from and _to",
                  "fullTitle": "EdgeCollection API edgeCollection.save takes an options object with positional _from and _to",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data = { chicken: \"chicken\" };\nconst from = \"d/1\";\nconst to = \"d/2\";\nconst meta = await collection.save(data, from, to, { returnNew: true });\nchai_1.expect(meta).to.be.an(\"object\");\nchai_1.expect(meta)\n    .to.have.property(\"_id\")\n    .that.is.a(\"string\");\nchai_1.expect(meta)\n    .to.have.property(\"_rev\")\n    .that.is.a(\"string\");\nchai_1.expect(meta)\n    .to.have.property(\"_key\")\n    .that.is.a(\"string\");\nchai_1.expect(meta)\n    .to.have.property(\"new\")\n    .that.is.an(\"object\");\nchai_1.expect(meta.new).to.have.property(\"chicken\", data.chicken);\nconst doc = await collection.edge(meta._id);\nchai_1.expect(doc).to.have.keys(\"chicken\", \"_key\", \"_id\", \"_rev\", \"_from\", \"_to\");\nchai_1.expect(doc.chicken).to.equal(data.chicken);\nchai_1.expect(doc._id).to.equal(meta._id);\nchai_1.expect(doc._key).to.equal(meta._key);\nchai_1.expect(doc._rev).to.equal(meta._rev);\nchai_1.expect(doc._from).to.equal(from);\nchai_1.expect(doc._to).to.equal(to);",
                  "err": {},
                  "uuid": "93a5aee4-c5ef-4850-8d66-cb6fc4cc749f",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "85cf9c6f-0c05-4260-8582-c78ed5558547",
                "53accadc-279b-46a7-b7e8-fd9dfa54a11f",
                "dcef8c15-b363-45ef-a115-d64bf3dbbf8e",
                "5300f003-5c3b-4ee0-a5bb-abd9788d8300",
                "93a5aee4-c5ef-4850-8d66-cb6fc4cc749f"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "d8d2a9cc-d57b-4eb7-b22e-4965c35f6f52",
              "title": "edgeCollection.traversal",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/15-edge-collections.js",
              "file": "/lib/async/test/15-edge-collections.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "EdgeCollection API edgeCollection.traversal \"before each\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "knows = fabric.edgeCollection(\"knows\");\nconst person = fabric.collection(\"person\");\nPromise.all([person.create(), knows.create()])\n    .then(() => Promise.all([\n    person.import([\n        { _key: \"Alice\" },\n        { _key: \"Bob\" },\n        { _key: \"Charlie\" },\n        { _key: \"Dave\" },\n        { _key: \"Eve\" }\n    ]),\n    knows.import([\n        { _from: \"person/Alice\", _to: \"person/Bob\" },\n        { _from: \"person/Bob\", _to: \"person/Charlie\" },\n        { _from: \"person/Bob\", _to: \"person/Dave\" },\n        { _from: \"person/Eve\", _to: \"person/Alice\" },\n        { _from: \"person/Eve\", _to: \"person/Bob\" }\n    ])\n]))\n    .then(() => done())\n    .catch(done);",
                  "err": {},
                  "uuid": "c9c831cc-f1ce-40e8-b936-d55ccbb364c4",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "executes traversal",
                  "fullTitle": "EdgeCollection API edgeCollection.traversal executes traversal",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "knows\n    .traversal(\"person/Alice\", { direction: \"outbound\" })\n    .then((result) => {\n    chai_1.expect(result).to.have.property(\"visited\");\n    const visited = result.visited;\n    chai_1.expect(visited).to.have.property(\"vertices\");\n    const vertices = visited.vertices;\n    chai_1.expect(vertices).to.be.instanceOf(Array);\n    chai_1.expect(vertices.length).to.equal(4);\n    const names = vertices.map((d) => d._key);\n    for (const name of [\"Alice\", \"Bob\", \"Charlie\", \"Dave\"]) {\n        chai_1.expect(names).to.contain(name);\n    }\n    chai_1.expect(visited).to.have.property(\"paths\");\n    const paths = visited.paths;\n    chai_1.expect(paths).to.be.instanceOf(Array);\n    chai_1.expect(paths.length).to.equal(4);\n})\n    .then(() => done())\n    .catch(done);",
                  "err": {},
                  "uuid": "36f5720c-3d42-42eb-a2ed-47661c9ea215",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "36f5720c-3d42-42eb-a2ed-47661c9ea215"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "eb3d6a7e-bbd3-4cc3-8aec-7dbc9d2cbb10",
              "title": "edgeCollection.replace",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/15-edge-collections.js",
              "file": "/lib/async/test/15-edge-collections.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "replaces the given edge",
                  "fullTitle": "EdgeCollection API edgeCollection.replace replaces the given edge",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const doc = { potato: \"tomato\", _from: \"d/1\", _to: \"d/2\" };\ncollection\n    .save(doc)\n    .then(meta => {\n    delete meta.error;\n    Object.assign(doc, meta);\n    return collection.replace(doc, {\n        sup: \"dawg\",\n        _from: \"d/1\",\n        _to: \"d/2\"\n    });\n})\n    .then(() => collection.edge(doc._key))\n    .then(data => {\n    chai_1.expect(data).not.to.have.property(\"potato\");\n    chai_1.expect(data).to.have.property(\"sup\", \"dawg\");\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "006dff02-ce16-4a38-92c3-136f24d73a60",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "006dff02-ce16-4a38-92c3-136f24d73a60"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "254e27cd-91f3-4e06-bf4f-eea3911e4697",
              "title": "edgeCollection.update",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/15-edge-collections.js",
              "file": "/lib/async/test/15-edge-collections.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "updates the given document",
                  "fullTitle": "EdgeCollection API edgeCollection.update updates the given document",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let doc = { potato: \"tomato\", empty: false, _from: \"d/1\", _to: \"d/2\" };\ncollection\n    .save(doc)\n    .then(meta => {\n    delete meta.error;\n    Object.assign(doc, meta);\n    return collection.update(doc, { sup: \"dawg\", empty: null });\n})\n    .then(() => collection.edge(doc._key))\n    .then(data => {\n    chai_1.expect(data).to.have.property(\"potato\", doc.potato);\n    chai_1.expect(data).to.have.property(\"sup\", \"dawg\");\n    chai_1.expect(data).to.have.property(\"empty\", null);\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "6b125b42-414b-4b28-b290-57c73bc90931",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "removes null values if keepNull is explicitly set to false",
                  "fullTitle": "EdgeCollection API edgeCollection.update removes null values if keepNull is explicitly set to false",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let doc = { potato: \"tomato\", empty: false, _from: \"d/1\", _to: \"d/2\" };\ncollection\n    .save(doc)\n    .then(meta => {\n    delete meta.error;\n    Object.assign(doc, meta);\n    return collection.update(doc, { sup: \"dawg\", empty: null }, { keepNull: false });\n})\n    .then(() => collection.edge(doc._key))\n    .then(data => {\n    chai_1.expect(data).to.have.property(\"potato\", doc.potato);\n    chai_1.expect(data).to.have.property(\"sup\", \"dawg\");\n    chai_1.expect(data).not.to.have.property(\"empty\");\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "73392cdf-6d01-44b9-875c-fe0acde704a7",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "6b125b42-414b-4b28-b290-57c73bc90931",
                "73392cdf-6d01-44b9-875c-fe0acde704a7"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "754860f3-245d-4a95-82eb-6325cce14601",
              "title": "edgeCollection.remove",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/15-edge-collections.js",
              "file": "/lib/async/test/15-edge-collections.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "EdgeCollection API edgeCollection.remove \"before each\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "collection\n    .save({ _key: key, _from: \"d/1\", _to: \"d/2\" })\n    .then(() => void done())\n    .catch(done);",
                  "err": {},
                  "uuid": "d4c6c03b-4bf3-4c4b-aeb7-702209aa8561",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "deletes the given edge",
                  "fullTitle": "EdgeCollection API edgeCollection.remove deletes the given edge",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "collection\n    .remove(key)\n    .then(() => collection.edge(key))\n    .then(() => Promise.reject(new Error(\"Should not succeed\")), () => void done())\n    .catch(done);",
                  "err": {},
                  "uuid": "3d934b7f-9234-4b6e-ba85-c277843f88e1",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "3d934b7f-9234-4b6e-ba85-c277843f88e1"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "f8bdef58-c9a9-42d5-8ff5-f26041985853",
          "title": "Graph API",
          "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/16-graphs.js",
          "file": "/lib/async/test/16-graphs.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Graph API \"before all\" hook",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "fabric = new jsC8_1.Fabric({\n    url: testUrl,\n    c8Version: Number(process.env.C8_VERSION || 30400)\n});\nawait fabric.login(\"guest@macrometa.io\", \"guest\");\nfabric.useTenant(\"guest\");\nconst response = await fabric.getAllEdgeLocations();\ndcList = helper_1.getDCListString(response);\nawait fabric.createFabric(name, [{ username: \"root\" }], { dcList: dcList });\nfabric.useFabric(name);",
              "err": {
                "message": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443",
                "estack": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:57:26)",
                "diff": null
              },
              "uuid": "16126beb-cc85-491c-97d7-0b4767ee158e",
              "parentUUID": "f8bdef58-c9a9-42d5-8ff5-f26041985853",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "Graph API \"after all\" hook",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "try {\n    fabric.useFabric(\"_system\");\n    await fabric.dropFabric(name);\n}\nfinally {\n    fabric.close();\n}",
              "err": {
                "message": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443",
                "estack": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:57:26)",
                "diff": null
              },
              "uuid": "1f622453-b392-4628-9e64-bf1ca6eae530",
              "parentUUID": "f8bdef58-c9a9-42d5-8ff5-f26041985853",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "be3edaa4-10c3-4903-a318-3c7767d54a0e",
              "title": "graph.get",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/16-graphs.js",
              "file": "/lib/async/test/16-graphs.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook",
                  "fullTitle": "Graph API graph.get \"before all\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "graph = fabric.graph(`g${Date.now()}`);\ncreateCollections(fabric)\n    .then(names => {\n    collectionNames = names.reduce((a, b) => a.concat(b));\n    return createGraph(graph, names[0], names[1]);\n})\n    .then(() => void done())\n    .catch(done);",
                  "err": {},
                  "uuid": "530ea061-ae40-40c8-bed1-3ad56f9b594c",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook",
                  "fullTitle": "Graph API graph.get \"after all\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "graph\n    .drop()\n    .then(() => Promise.all(collectionNames.map(name => fabric.collection(name).drop())))\n    .then(() => void done())\n    .catch(done);",
                  "err": {},
                  "uuid": "18d8ffef-27c2-40ec-b597-bd2ff7939eac",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "fetches information about the graph",
                  "fullTitle": "Graph API graph.get fetches information about the graph",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "graph\n    .get()\n    .then(data => {\n    chai_1.expect(data).to.have.property(\"name\", graph.name);\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "4bf093f3-e7ee-4008-af3f-056f55cb6bdc",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "4bf093f3-e7ee-4008-af3f-056f55cb6bdc"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "1a84d490-b21d-425b-b66c-c523aad3f914",
              "title": "graph.create",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/16-graphs.js",
              "file": "/lib/async/test/16-graphs.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook",
                  "fullTitle": "Graph API graph.create \"before all\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "createCollections(fabric)\n    .then(names => {\n    [vertexCollectionNames, edgeCollectionNames] = names;\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "f7a88d63-fcb2-4a2b-af90-de66662a8f40",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook",
                  "fullTitle": "Graph API graph.create \"after all\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "Promise.all([...edgeCollectionNames, ...vertexCollectionNames].map(name => fabric.collection(name).drop()))\n    .then(() => void done())\n    .catch(done);",
                  "err": {},
                  "uuid": "abbccb6b-ed60-419d-a8e6-0374be433e57",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "creates the graph",
                  "fullTitle": "Graph API graph.create creates the graph",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let graph = fabric.graph(`g${Date.now()}`);\ngraph\n    .create({\n    edgeDefinitions: edgeCollectionNames.map(name => ({\n        collection: name,\n        from: vertexCollectionNames,\n        to: vertexCollectionNames\n    }))\n})\n    .then(() => graph.get())\n    .then(data => {\n    chai_1.expect(data).to.have.property(\"name\", graph.name);\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "b593d5b0-e630-47f6-aa10-51209afca08e",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "b593d5b0-e630-47f6-aa10-51209afca08e"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "22ccd41e-3e39-4705-bc0a-2a5f208e5249",
              "title": "graph.drop",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/16-graphs.js",
              "file": "/lib/async/test/16-graphs.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Graph API graph.drop \"before each\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "graph = fabric.graph(`g${Date.now()}`);\ncreateCollections(fabric)\n    .then(names => {\n    [vertexCollectionNames, edgeCollectionNames] = names;\n    return createGraph(graph, names[0], names[1]);\n})\n    .then(() => void done())\n    .catch(done);",
                  "err": {},
                  "uuid": "e171c8e3-0c95-4166-8ac9-12055dcd7831",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook",
                  "fullTitle": "Graph API graph.drop \"after each\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "Promise.all([...edgeCollectionNames, ...vertexCollectionNames].map(name => fabric\n    .collection(name)\n    .drop()\n    .catch(() => null)))\n    .then(() => void done())\n    .catch(done);",
                  "err": {},
                  "uuid": "d08a7393-bed1-4904-bed6-3a29beef6914",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "destroys the graph if not passed true",
                  "fullTitle": "Graph API graph.drop destroys the graph if not passed true",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "graph\n    .drop()\n    .then(() => graph\n    .get()\n    .then(() => Promise.reject(new Error(\"Should not succeed\")), () => undefined))\n    .then(() => fabric.listCollections())\n    .then(collections => {\n    chai_1.expect(collections.map((c) => c.name)).to.include.members([\n        ...edgeCollectionNames,\n        ...vertexCollectionNames\n    ]);\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "121b41ba-5e49-44ae-af92-75eda4f2c327",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "additionally drops all of its collections if passed true",
                  "fullTitle": "Graph API graph.drop additionally drops all of its collections if passed true",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "graph\n    .drop(true)\n    .then(() => graph\n    .get()\n    .then(() => Promise.reject(new Error(\"Should not succeed\")), () => undefined))\n    .then(() => fabric.listCollections())\n    .then(collections => {\n    chai_1.expect(collections.map((c) => c.name)).not.to.include.members([\n        ...edgeCollectionNames,\n        ...vertexCollectionNames\n    ]);\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "9bf9ea0a-07ec-4abf-a77e-fd4a3703ca6c",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "121b41ba-5e49-44ae-af92-75eda4f2c327",
                "9bf9ea0a-07ec-4abf-a77e-fd4a3703ca6c"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "8ab3eb55-c1c9-4018-b046-80db99dbd87a",
          "title": "Manipulating graph vertices",
          "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/17-graph-vertices.js",
          "file": "/lib/async/test/17-graph-vertices.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Manipulating graph vertices \"before all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "fabric = new jsC8_1.Fabric({\n    url: testUrl,\n    c8Version: Number(process.env.C8_VERSION || 30400)\n});\nawait fabric.login(\"guest@macrometa.io\", \"guest\");\nfabric.useTenant(\"guest\");\nconst response = await fabric.getAllEdgeLocations();\ndcList = helper_1.getDCListString(response);\nawait fabric.createFabric(name, [{ username: \"root\" }], { dcList: dcList });\nfabric.useFabric(name);",
              "err": {
                "message": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443",
                "estack": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:57:26)",
                "diff": null
              },
              "uuid": "6348280f-6321-4988-8e49-22b239f1f957",
              "parentUUID": "8ab3eb55-c1c9-4018-b046-80db99dbd87a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "Manipulating graph vertices \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "graph = fabric.graph(`g${Date.now()}`);\ncreateCollections(fabric)\n    .then(names => {\n    collectionNames = names.reduce((a, b) => a.concat(b));\n    return createGraph(graph, names[0], names[1]);\n})\n    .then(() => void done())\n    .catch(done);",
              "err": {},
              "uuid": "8d93d614-26e8-406f-a0a7-e312433d8699",
              "parentUUID": "8ab3eb55-c1c9-4018-b046-80db99dbd87a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "Manipulating graph vertices \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "try {\n    fabric.useFabric(\"_system\");\n    await fabric.dropFabric(name);\n}\nfinally {\n    fabric.close();\n}",
              "err": {
                "message": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443",
                "estack": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:57:26)",
                "diff": null
              },
              "uuid": "12fdfeee-5a0d-4327-bc12-26a91ca2f2ee",
              "parentUUID": "8ab3eb55-c1c9-4018-b046-80db99dbd87a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "Manipulating graph vertices \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "graph\n    .drop()\n    .then(() => Promise.all(collectionNames.map(name => fabric.collection(name).drop())))\n    .then(() => void done())\n    .catch(done);",
              "err": {},
              "uuid": "394512f3-498c-48ea-839d-06247284ed41",
              "parentUUID": "8ab3eb55-c1c9-4018-b046-80db99dbd87a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "80bde22f-dd94-4ab0-861d-0f0a2d845bf2",
              "title": "graph.vertexCollection",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/17-graph-vertices.js",
              "file": "/lib/async/test/17-graph-vertices.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns a GraphVertexCollection instance for the collection",
                  "fullTitle": "Manipulating graph vertices graph.vertexCollection returns a GraphVertexCollection instance for the collection",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let name = \"potato\";\nlet collection = graph.vertexCollection(name);\nchai_1.expect(collection).to.be.an.instanceof(graph_1.GraphVertexCollection);\nchai_1.expect(collection)\n    .to.have.property(\"name\")\n    .that.equals(name);",
                  "err": {},
                  "uuid": "912f3e3e-ea57-4ca0-97f1-6d73c39b9ae4",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "912f3e3e-ea57-4ca0-97f1-6d73c39b9ae4"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "11aaf524-6f91-478a-816d-3a7eefc3ff6c",
              "title": "graph.addVertexCollection",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/17-graph-vertices.js",
              "file": "/lib/async/test/17-graph-vertices.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Manipulating graph vertices graph.addVertexCollection \"before each\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "vertexCollection = fabric.collection(`coll${Date.now()}`);\nvertexCollection\n    .create()\n    .then(() => void done())\n    .catch(done);",
                  "err": {},
                  "uuid": "26b05fb7-8e9d-4471-ae48-f386caef53f1",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook",
                  "fullTitle": "Manipulating graph vertices graph.addVertexCollection \"after each\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "vertexCollection\n    .drop()\n    .then(() => void done())\n    .catch(done);",
                  "err": {},
                  "uuid": "eba61638-7774-498a-9f8f-f8f29c19f658",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "adds the given vertex collection to the graph",
                  "fullTitle": "Manipulating graph vertices graph.addVertexCollection adds the given vertex collection to the graph",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "graph\n    .addVertexCollection(vertexCollection.name)\n    .then(data => {\n    chai_1.expect(data.orphanCollections).to.contain(vertexCollection.name);\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "6af29d19-4fd0-4884-86fd-10964fec4b61",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "6af29d19-4fd0-4884-86fd-10964fec4b61"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "115543da-a0c8-4920-a11f-8e8c351a6b38",
              "title": "graph.removeVertexCollection",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/17-graph-vertices.js",
              "file": "/lib/async/test/17-graph-vertices.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Manipulating graph vertices graph.removeVertexCollection \"before each\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "vertexCollection = fabric.collection(`xc${Date.now()}`);\nvertexCollection\n    .create()\n    .then(() => graph.addVertexCollection(vertexCollection.name))\n    .then(() => void done())\n    .catch(done);",
                  "err": {},
                  "uuid": "a06a0e2a-3861-4767-a591-032fce74f44f",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "removes the given vertex collection from the graph",
                  "fullTitle": "Manipulating graph vertices graph.removeVertexCollection removes the given vertex collection from the graph",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "graph\n    .removeVertexCollection(vertexCollection.name)\n    .then(data => {\n    chai_1.expect(data.orphanCollections).not.to.contain(vertexCollection.name);\n    return vertexCollection.get();\n})\n    .then(() => done())\n    .catch(done);",
                  "err": {},
                  "uuid": "cb0cbe06-27a9-49bf-9458-abdbfb7960e5",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "destroys the collection if explicitly passed true",
                  "fullTitle": "Manipulating graph vertices graph.removeVertexCollection destroys the collection if explicitly passed true",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "graph\n    .removeVertexCollection(vertexCollection.name, true)\n    .then(data => {\n    chai_1.expect(data.orphanCollections).not.to.contain(vertexCollection.name);\n    return vertexCollection.get();\n})\n    .then(() => Promise.reject(new Error(\"Should not succeed\")), err => {\n    chai_1.expect(err).to.be.an.instanceof(error_1.C8Error);\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "2db427e8-09e4-45fa-a672-55a41f961bee",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "cb0cbe06-27a9-49bf-9458-abdbfb7960e5",
                "2db427e8-09e4-45fa-a672-55a41f961bee"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "e8a5db49-6010-411b-8917-39e813f19ecc",
          "title": "Manipulating graph edges",
          "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/18-graph-edges.js",
          "file": "/lib/async/test/18-graph-edges.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Manipulating graph edges \"before all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "fabric = new jsC8_1.Fabric({\n    url: testUrl,\n    c8Version: Number(process.env.C8_VERSION || 30400)\n});\nawait fabric.login(\"guest@macrometa.io\", \"guest\");\nfabric.useTenant(\"guest\");\nconst response = await fabric.getAllEdgeLocations();\ndcList = helper_1.getDCListString(response);\nawait fabric.createFabric(dbName, [{ username: \"root\" }], {\n    dcList: dcList\n});\nfabric.useFabric(dbName);",
              "err": {
                "message": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443",
                "estack": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:57:26)",
                "diff": null
              },
              "uuid": "5c7209ae-0821-4f79-a2c7-b116df92b969",
              "parentUUID": "e8a5db49-6010-411b-8917-39e813f19ecc",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "Manipulating graph edges \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "graph = fabric.graph(graphName);\ngraph\n    .create({\n    edgeDefinitions: [\n        {\n            collection: \"knows\",\n            from: [\"person\"],\n            to: [\"person\"]\n        }\n    ]\n})\n    .then(() => void done())\n    .catch(done);",
              "err": {},
              "uuid": "08eebff5-150b-482d-b971-9504d0884849",
              "parentUUID": "e8a5db49-6010-411b-8917-39e813f19ecc",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "Manipulating graph edges \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "try {\n    fabric.useFabric(\"_system\");\n    await fabric.dropFabric(dbName);\n}\nfinally {\n    fabric.close();\n}",
              "err": {
                "message": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443",
                "estack": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:57:26)",
                "diff": null
              },
              "uuid": "fe52818d-af72-4da8-a851-5a1be655bd81",
              "parentUUID": "e8a5db49-6010-411b-8917-39e813f19ecc",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "Manipulating graph edges \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "graph\n    .drop()\n    .then(() => void done())\n    .catch(done);",
              "err": {},
              "uuid": "d64cb5bf-18ab-4b4a-b5e7-76091edb3fca",
              "parentUUID": "e8a5db49-6010-411b-8917-39e813f19ecc",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "382dc646-e22d-4793-85e1-5eeb241fbd95",
              "title": "graph.get",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/18-graph-edges.js",
              "file": "/lib/async/test/18-graph-edges.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return information about the graph",
                  "fullTitle": "Manipulating graph edges graph.get should return information about the graph",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "graph\n    .get()\n    .then(info => {\n    chai_1.expect(info).to.have.property(\"name\", graphName);\n    chai_1.expect(info).to.have.property(\"edgeDefinitions\");\n    chai_1.expect(info.edgeDefinitions).to.be.instanceOf(Array);\n    chai_1.expect(info.edgeDefinitions.length).to.equal(1);\n    chai_1.expect(info.edgeDefinitions.map((e) => e.collection)).to.contain(\"knows\");\n    const edgeDefinition = info.edgeDefinitions.filter((e) => e.collection === \"knows\");\n    chai_1.expect([].concat.apply([], edgeDefinition.map((e) => e.from))).to.contain(\"person\");\n    chai_1.expect([].concat.apply([], edgeDefinition.map((e) => e.to))).to.contain(\"person\");\n})\n    .then(() => done())\n    .catch(done);",
                  "err": {},
                  "uuid": "59468e43-f43c-4839-9a49-5806e9205046",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "59468e43-f43c-4839-9a49-5806e9205046"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "c6486bd4-4fe9-4898-8445-5f175ae8d48f",
              "title": "graph.edgeCollections",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/18-graph-edges.js",
              "file": "/lib/async/test/18-graph-edges.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should contain edge collection",
                  "fullTitle": "Manipulating graph edges graph.edgeCollections should contain edge collection",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "graph\n    .edgeCollections()\n    .then(info => {\n    chai_1.expect(info).to.be.instanceOf(Array);\n    chai_1.expect(info.length).to.equal(1);\n    chai_1.expect(info.map((c) => c.name)).to.contain(\"knows\");\n})\n    .then(() => done())\n    .catch(done);",
                  "err": {},
                  "uuid": "30652431-025e-4e44-ac33-58c3532d8755",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "30652431-025e-4e44-ac33-58c3532d8755"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "01788eb0-85ba-453f-9f3a-08654b734490",
              "title": "graph.listEdgeCollections",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/18-graph-edges.js",
              "file": "/lib/async/test/18-graph-edges.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return all edge collection names",
                  "fullTitle": "Manipulating graph edges graph.listEdgeCollections should return all edge collection names",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "graph\n    .listEdgeCollections()\n    .then(info => {\n    chai_1.expect(info).to.be.instanceOf(Array);\n    chai_1.expect(info.length).to.equal(1);\n    chai_1.expect(info).to.contain(\"knows\");\n})\n    .then(() => done())\n    .catch(done);",
                  "err": {},
                  "uuid": "a451984a-d49f-4c35-b9ef-eb4a14634d34",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "a451984a-d49f-4c35-b9ef-eb4a14634d34"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "f55771ed-db9c-43b7-866a-ab272f0f7b61",
              "title": "graph.listVertexCollections",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/18-graph-edges.js",
              "file": "/lib/async/test/18-graph-edges.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return all vertex collection names",
                  "fullTitle": "Manipulating graph edges graph.listVertexCollections should return all vertex collection names",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "graph\n    .listVertexCollections()\n    .then(info => {\n    chai_1.expect(info).to.be.instanceOf(Array);\n    chai_1.expect(info.length).to.equal(1);\n    chai_1.expect(info).to.contain(\"person\");\n})\n    .then(() => done())\n    .catch(done);",
                  "err": {},
                  "uuid": "d62eb041-1cba-48da-8d89-ff3903ed4cee",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "d62eb041-1cba-48da-8d89-ff3903ed4cee"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "b8bfb16b-83b2-463d-aecf-c9d181aa1ab0",
              "title": "graph.addEdgeDefinition",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/18-graph-edges.js",
              "file": "/lib/async/test/18-graph-edges.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should add an edgeDefinition to the graph",
                  "fullTitle": "Manipulating graph edges graph.addEdgeDefinition should add an edgeDefinition to the graph",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "graph\n    .addEdgeDefinition({\n    collection: \"works_in\",\n    from: [\"person\"],\n    to: [\"city\"]\n})\n    .then(info => {\n    chai_1.expect(info).to.have.property(\"name\", graphName);\n    chai_1.expect(info).to.have.property(\"edgeDefinitions\");\n    chai_1.expect(info.edgeDefinitions).to.be.instanceOf(Array);\n    chai_1.expect(info.edgeDefinitions.length).to.equal(2);\n    chai_1.expect(info.edgeDefinitions.map((e) => e.collection)).to.contain(\"works_in\");\n    const edgeDefinition = info.edgeDefinitions.filter((e) => e.collection === \"works_in\");\n    chai_1.expect([].concat.apply([], edgeDefinition.map((e) => e.from))).to.contain(\"person\");\n    chai_1.expect([].concat.apply([], edgeDefinition.map((e) => e.to))).to.contain(\"city\");\n})\n    .then(() => done())\n    .catch(done);",
                  "err": {},
                  "uuid": "a04fbe94-31eb-49af-9861-12c0e71ecf0c",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "a04fbe94-31eb-49af-9861-12c0e71ecf0c"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "a6341c51-36ba-42c0-91a5-951796fd25af",
              "title": "graph.replaceEdgeDefinition",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/18-graph-edges.js",
              "file": "/lib/async/test/18-graph-edges.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should replace an existing edgeDefinition in the graph",
                  "fullTitle": "Manipulating graph edges graph.replaceEdgeDefinition should replace an existing edgeDefinition in the graph",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "graph\n    .replaceEdgeDefinition(\"knows\", {\n    collection: \"knows\",\n    from: [\"person\"],\n    to: [\"city\"]\n})\n    .then(info => {\n    chai_1.expect(info).to.have.property(\"name\", graphName);\n    chai_1.expect(info).to.have.property(\"edgeDefinitions\");\n    chai_1.expect(info.edgeDefinitions).to.be.instanceOf(Array);\n    chai_1.expect(info.edgeDefinitions.length).to.equal(1);\n    chai_1.expect(info.edgeDefinitions.map((e) => e.collection)).to.contain(\"knows\");\n    const edgeDefinition = info.edgeDefinitions.filter((e) => e.collection === \"knows\");\n    chai_1.expect([].concat.apply([], edgeDefinition.map((e) => e.from))).to.contain(\"person\");\n    chai_1.expect([].concat.apply([], edgeDefinition.map((e) => e.to))).to.contain(\"city\");\n})\n    .then(() => done())\n    .catch(done);",
                  "err": {},
                  "uuid": "e67962bd-1fe8-4e26-b8d1-07f63ab0ed5b",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "e67962bd-1fe8-4e26-b8d1-07f63ab0ed5b"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "b03922b9-127b-4189-8df8-ad4c7e0045aa",
              "title": "graph.removeEdgeDefinition",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/18-graph-edges.js",
              "file": "/lib/async/test/18-graph-edges.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should remove an edgeDefinition from the graph",
                  "fullTitle": "Manipulating graph edges graph.removeEdgeDefinition should remove an edgeDefinition from the graph",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "graph\n    .removeEdgeDefinition(\"knows\")\n    .then(info => {\n    chai_1.expect(info).to.have.property(\"name\", graphName);\n    chai_1.expect(info).to.have.property(\"edgeDefinitions\");\n    chai_1.expect(info.edgeDefinitions).to.be.instanceOf(Array);\n    chai_1.expect(info.edgeDefinitions.length).to.equal(0);\n})\n    .then(() => done())\n    .catch(done);",
                  "err": {},
                  "uuid": "edaa1236-0936-44d6-9db8-3eadfaa58083",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "edaa1236-0936-44d6-9db8-3eadfaa58083"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "2f6de807-f2d4-4bd7-875b-4086fbe6a874",
          "title": "GraphVertexCollection API",
          "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/19-graph-vertex-collections.js",
          "file": "/lib/async/test/19-graph-vertex-collections.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "GraphVertexCollection API \"before all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "fabric = new jsC8_1.Fabric({\n    url: testUrl,\n    c8Version: Number(process.env.C8_VERSION || 30400)\n});\nawait fabric.login(\"guest@macrometa.io\", \"guest\");\nfabric.useTenant(\"guest\");\nconst response = await fabric.getAllEdgeLocations();\ndcList = helper_1.getDCListString(response);\nawait fabric.createFabric(dbName, [{ username: \"root\" }], {\n    dcList: dcList\n});\nfabric.useFabric(dbName);\nconst graph = fabric.graph(`testgraph${Date.now()}`);\nawait graph.create({\n    edgeDefinitions: [\n        {\n            collection: \"knows\",\n            from: [\"person\"],\n            to: [\"person\"]\n        }\n    ]\n});\ncollection = graph.vertexCollection(\"person\");",
              "err": {
                "message": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443",
                "estack": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:57:26)",
                "diff": null
              },
              "uuid": "d171c8d3-d3e5-4d86-a642-8768366fdcab",
              "parentUUID": "2f6de807-f2d4-4bd7-875b-4086fbe6a874",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "GraphVertexCollection API \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "collection\n    .truncate()\n    .then(() => done())\n    .catch(done);",
              "err": {},
              "uuid": "2fb9ae88-fe0c-4994-90d2-5543c36f0245",
              "parentUUID": "2f6de807-f2d4-4bd7-875b-4086fbe6a874",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "GraphVertexCollection API \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "try {\n    fabric.useFabric(\"_system\");\n    await fabric.dropFabric(dbName);\n}\nfinally {\n    fabric.close();\n}",
              "err": {
                "message": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443",
                "estack": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:57:26)",
                "diff": null
              },
              "uuid": "c4fe5ce2-0a40-49c5-bd07-a83f89c8cbae",
              "parentUUID": "2f6de807-f2d4-4bd7-875b-4086fbe6a874",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "60028ffa-00e5-4fa0-ae43-b7e0ae8d3065",
              "title": "graphVertexCollection.vertex",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/19-graph-vertex-collections.js",
              "file": "/lib/async/test/19-graph-vertex-collections.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "GraphVertexCollection API graphVertexCollection.vertex \"before each\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "meta = await collection.save(data);",
                  "err": {},
                  "uuid": "a8a24425-314f-4897-a37b-ee1e5058a02a",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns a vertex in the collection",
                  "fullTitle": "GraphVertexCollection API graphVertexCollection.vertex returns a vertex in the collection",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const doc = await collection.vertex(meta._id);\nchai_1.expect(doc).to.have.keys(\"_key\", \"_id\", \"_rev\", \"foo\");\nchai_1.expect(doc._id).to.equal(meta._id);\nchai_1.expect(doc._key).to.equal(meta._key);\nchai_1.expect(doc._rev).to.equal(meta._rev);\nchai_1.expect(doc.foo).to.equal(data.foo);",
                  "err": {},
                  "uuid": "3dd873f3-2b81-4b22-bf35-485c18760a61",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "does not throw on not found when graceful",
                  "fullTitle": "GraphVertexCollection API graphVertexCollection.vertex does not throw on not found when graceful",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const doc = await collection.vertex(\"doesnotexist\", true);\nchai_1.expect(doc).to.equal(null);",
                  "err": {},
                  "uuid": "f8dc9790-5e50-4331-b976-3ec329997957",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "3dd873f3-2b81-4b22-bf35-485c18760a61",
                "f8dc9790-5e50-4331-b976-3ec329997957"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "c77cd49b-6d9b-498b-ba6f-68c7736336c8",
              "title": "graphVertexCollection.document",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/19-graph-vertex-collections.js",
              "file": "/lib/async/test/19-graph-vertex-collections.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "GraphVertexCollection API graphVertexCollection.document \"before each\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "meta = await collection.save(data);",
                  "err": {},
                  "uuid": "2d03448a-ac3c-45c4-8aec-84805352db15",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns a vertex in the collection",
                  "fullTitle": "GraphVertexCollection API graphVertexCollection.document returns a vertex in the collection",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const doc = await collection.document(meta._id);\nchai_1.expect(doc).to.have.keys(\"_key\", \"_id\", \"_rev\", \"foo\");\nchai_1.expect(doc._id).to.equal(meta._id);\nchai_1.expect(doc._key).to.equal(meta._key);\nchai_1.expect(doc._rev).to.equal(meta._rev);\nchai_1.expect(doc.foo).to.equal(data.foo);",
                  "err": {},
                  "uuid": "a0f96db1-f29a-47dd-be61-efa0de7c50bf",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "does not throw on not found when graceful",
                  "fullTitle": "GraphVertexCollection API graphVertexCollection.document does not throw on not found when graceful",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const doc = await collection.document(\"doesnotexist\", true);\nchai_1.expect(doc).to.equal(null);",
                  "err": {},
                  "uuid": "6d0048ed-e91c-4051-875e-4bde258791f3",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "a0f96db1-f29a-47dd-be61-efa0de7c50bf",
                "6d0048ed-e91c-4051-875e-4bde258791f3"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "d13efc81-482a-4bd8-acc3-299d4fd375c8",
              "title": "graphVertexCollection.save",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/19-graph-vertex-collections.js",
              "file": "/lib/async/test/19-graph-vertex-collections.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "creates a vertex in the collection",
                  "fullTitle": "GraphVertexCollection API graphVertexCollection.save creates a vertex in the collection",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let data = { foo: \"bar\" };\ncollection\n    .save(data)\n    .then(meta => {\n    chai_1.expect(meta).to.be.an(\"object\");\n    chai_1.expect(meta)\n        .to.have.property(\"_id\")\n        .that.is.a(\"string\");\n    chai_1.expect(meta)\n        .to.have.property(\"_rev\")\n        .that.is.a(\"string\");\n    chai_1.expect(meta)\n        .to.have.property(\"_key\")\n        .that.is.a(\"string\");\n    return collection.vertex(meta._id).then(doc => {\n        chai_1.expect(doc).to.have.keys(\"_key\", \"_id\", \"_rev\", \"foo\");\n        chai_1.expect(doc._id).to.equal(meta._id);\n        chai_1.expect(doc._key).to.equal(meta._key);\n        chai_1.expect(doc._rev).to.equal(meta._rev);\n        chai_1.expect(doc.foo).to.equal(data.foo);\n    });\n})\n    .then(() => void done())\n    .catch(done);",
                  "err": {},
                  "uuid": "e8d0994d-10f9-469c-94e3-717ecaf54acd",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "uses the given _key if provided",
                  "fullTitle": "GraphVertexCollection API graphVertexCollection.save uses the given _key if provided",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let data = { potato: \"tomato\", _key: \"banana\" };\ncollection\n    .save(data)\n    .then(meta => {\n    chai_1.expect(meta).to.be.an(\"object\");\n    chai_1.expect(meta)\n        .to.have.property(\"_id\")\n        .that.is.a(\"string\");\n    chai_1.expect(meta)\n        .to.have.property(\"_rev\")\n        .that.is.a(\"string\");\n    chai_1.expect(meta)\n        .to.have.property(\"_key\")\n        .that.equals(data._key);\n    return collection.vertex(meta._id).then(doc => {\n        chai_1.expect(doc).to.have.keys(\"_key\", \"_id\", \"_rev\", \"potato\");\n        chai_1.expect(doc._id).to.equal(meta._id);\n        chai_1.expect(doc._rev).to.equal(meta._rev);\n        chai_1.expect(doc._key).to.equal(data._key);\n        chai_1.expect(doc.potato).to.equal(data.potato);\n    });\n})\n    .then(() => void done())\n    .catch(done);",
                  "err": {},
                  "uuid": "a83ee9ff-5a02-430e-9bb9-b5226013b303",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "e8d0994d-10f9-469c-94e3-717ecaf54acd",
                "a83ee9ff-5a02-430e-9bb9-b5226013b303"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "986fcf5a-12fb-4fce-9454-2488bb7b5387",
              "title": "graphVertexCollection.replace",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/19-graph-vertex-collections.js",
              "file": "/lib/async/test/19-graph-vertex-collections.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "replaces the given vertex",
                  "fullTitle": "GraphVertexCollection API graphVertexCollection.replace replaces the given vertex",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let doc = { potato: \"tomato\" };\ncollection\n    .save(doc)\n    .then(meta => {\n    delete meta.error;\n    Object.assign(doc, meta);\n    return collection.replace(doc, { sup: \"dawg\" });\n})\n    .then(() => collection.vertex(doc._key))\n    .then(data => {\n    chai_1.expect(data).not.to.have.property(\"potato\");\n    chai_1.expect(data)\n        .to.have.property(\"sup\")\n        .that.equals(\"dawg\");\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "fe6090f9-6656-4256-9417-df63cb24748a",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "fe6090f9-6656-4256-9417-df63cb24748a"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "6f8dbf9f-02bc-45e4-ae05-4743d2e17c9a",
              "title": "graphVertexCollection.update",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/19-graph-vertex-collections.js",
              "file": "/lib/async/test/19-graph-vertex-collections.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "updates the given vertex",
                  "fullTitle": "GraphVertexCollection API graphVertexCollection.update updates the given vertex",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let doc = { potato: \"tomato\", empty: false };\ncollection\n    .save(doc)\n    .then(meta => {\n    delete meta.error;\n    Object.assign(doc, meta);\n    return collection.update(doc, { sup: \"dawg\", empty: null });\n})\n    .then(() => collection.vertex(doc._key))\n    .then(data => {\n    chai_1.expect(data)\n        .to.have.property(\"potato\")\n        .that.equals(doc.potato);\n    chai_1.expect(data)\n        .to.have.property(\"sup\")\n        .that.equals(\"dawg\");\n    chai_1.expect(data)\n        .to.have.property(\"empty\")\n        .that.equals(null);\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "69797ae8-0bbc-4abe-a483-c523f0afdbfc",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "removes null values if keepNull is explicitly set to false",
                  "fullTitle": "GraphVertexCollection API graphVertexCollection.update removes null values if keepNull is explicitly set to false",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let doc = { potato: \"tomato\", empty: false };\ncollection\n    .save(doc)\n    .then(meta => {\n    delete meta.error;\n    Object.assign(doc, meta);\n    return collection.update(doc, { sup: \"dawg\", empty: null }, { keepNull: false });\n})\n    .then(() => collection.vertex(doc._key))\n    .then(data => {\n    chai_1.expect(data)\n        .to.have.property(\"potato\")\n        .that.equals(doc.potato);\n    chai_1.expect(data)\n        .to.have.property(\"sup\")\n        .that.equals(\"dawg\");\n    chai_1.expect(data).not.to.have.property(\"empty\");\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "9b992696-9710-4b47-a48d-93e6ec7b435d",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "69797ae8-0bbc-4abe-a483-c523f0afdbfc",
                "9b992696-9710-4b47-a48d-93e6ec7b435d"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "cd09f79c-93ea-4b94-8586-d742cfe3848a",
              "title": "graphVertexCollection.remove",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/19-graph-vertex-collections.js",
              "file": "/lib/async/test/19-graph-vertex-collections.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "GraphVertexCollection API graphVertexCollection.remove \"before each\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "collection\n    .save({ _key: key })\n    .then(() => void done())\n    .catch(done);",
                  "err": {},
                  "uuid": "93bc3eaa-ad15-46e3-8800-f3a9360cf2f9",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "deletes the given vertex",
                  "fullTitle": "GraphVertexCollection API graphVertexCollection.remove deletes the given vertex",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "collection\n    .remove(key)\n    .then(() => collection.vertex(key))\n    .then(() => Promise.reject(new Error(\"Should not succeed\")), () => void done())\n    .catch(done);",
                  "err": {},
                  "uuid": "3ac88b88-f34a-4428-91a4-9d90c7d1ed45",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "3ac88b88-f34a-4428-91a4-9d90c7d1ed45"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "cefc9e9f-b3eb-4130-b892-b47856888453",
          "title": "Join Path",
          "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/21-util-joinpath.js",
          "file": "/lib/async/test/21-util-joinpath.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "joinPath 1",
              "fullTitle": "Join Path joinPath 1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var baseUrl = \"../../u1/u2\";\nvar path = \"/security/authenticate\";\nchai_1.expect(joinPath_1.joinPath(baseUrl, path)).to.equal(\"../../u1/u2/security/authenticate\");",
              "err": {},
              "uuid": "2c3d7ff5-0f9d-4630-bf9d-aca74c1ab1a3",
              "parentUUID": "cefc9e9f-b3eb-4130-b892-b47856888453",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "joinPath 2",
              "fullTitle": "Join Path joinPath 2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var baseUrl = \"/u1/u2\";\nvar path = \"../security/authenticate\";\nchai_1.expect(joinPath_1.joinPath(baseUrl, path)).to.equal(\"/u1/security/authenticate\");",
              "err": {},
              "uuid": "8901228c-b42a-4941-817f-91cb1d567798",
              "parentUUID": "cefc9e9f-b3eb-4130-b892-b47856888453",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "joinPath 3",
              "fullTitle": "Join Path joinPath 3",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var baseUrl = \"/u1/u2\";\nvar path = \"../../security/authenticate\";\nchai_1.expect(joinPath_1.joinPath(baseUrl, path)).to.equal(\"/security/authenticate\");",
              "err": {},
              "uuid": "4f3df4db-0373-41d8-ad4b-2b3511999b5c",
              "parentUUID": "cefc9e9f-b3eb-4130-b892-b47856888453",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2c3d7ff5-0f9d-4630-bf9d-aca74c1ab1a3",
            "8901228c-b42a-4941-817f-91cb1d567798",
            "4f3df4db-0373-41d8-ad4b-2b3511999b5c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "e84189ae-7a2b-4f75-8562-59ea5b73e276",
          "title": "Helper.getFullStreamPath",
          "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/22-util-helper.js",
          "file": "/lib/async/test/22-util-helper.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "returns correct output when there is no extra url",
              "fullTitle": "Helper.getFullStreamPath returns correct output when there is no extra url",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const path = helper_1.getFullStreamPath(\"_polog\");\nchai_1.expect(path).to.equal(\"/streams/persistent/stream/_polog\");",
              "err": {},
              "uuid": "f6a33cd6-c2c9-4dfa-ad89-1c2317986d26",
              "parentUUID": "e84189ae-7a2b-4f75-8562-59ea5b73e276",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "returns correct output when there is extra url",
              "fullTitle": "Helper.getFullStreamPath returns correct output when there is extra url",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const path = helper_1.getFullStreamPath(\"_polog\", \"/compaction\");\nchai_1.expect(path).to.equal(\"/streams/persistent/stream/_polog/compaction\");",
              "err": {},
              "uuid": "1280f89e-6fae-4350-a165-5bdecb7a3824",
              "parentUUID": "e84189ae-7a2b-4f75-8562-59ea5b73e276",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f6a33cd6-c2c9-4dfa-ad89-1c2317986d26",
            "1280f89e-6fae-4350-a165-5bdecb7a3824"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "c39d811b-10af-45cd-8608-72a162f47024",
          "title": "Helper.getDCListString",
          "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/22-util-helper.js",
          "file": "/lib/async/test/22-util-helper.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "returns correct output",
              "fullTitle": "Helper.getDCListString returns correct output",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.expect(helper_1.getDCListString(response)).to.equal('dev-ap-southeast-1,dev-ap-southeast-2');",
              "err": {},
              "uuid": "cef38bf1-7417-46b4-bf93-4b1b990e5bcb",
              "parentUUID": "c39d811b-10af-45cd-8608-72a162f47024",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cef38bf1-7417-46b4-bf93-4b1b990e5bcb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "9593b63b-9392-45e3-8767-220ab9fb01d1",
          "title": "C8QL Stream queries",
          "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/23-c8ql-queries-stream.js",
          "file": "/lib/async/test/23-c8ql-queries-stream.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "C8QL Stream queries \"before all\" hook",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "fabric = new jsC8_1.Fabric({\n    url: testUrl,\n    c8Version: Number(process.env.C8_VERSION || 30400)\n});\nawait fabric.login(\"guest@macrometa.io\", \"guest\");\nfabric.useTenant(\"guest\");\nconst response = await fabric.getAllEdgeLocations();\ndcList = helper_1.getDCListString(response);\nawait fabric.createFabric(name, [{ username: \"root\" }], { dcList: dcList });\nfabric.useFabric(name);",
              "err": {
                "message": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443",
                "estack": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:57:26)",
                "diff": null
              },
              "uuid": "843e93b1-0a56-4248-9fd8-c0ca89e7222b",
              "parentUUID": "9593b63b-9392-45e3-8767-220ab9fb01d1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "C8QL Stream queries \"after all\" hook",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "try {\n    fabric.useFabric(\"_system\");\n    await fabric.dropFabric(name);\n}\nfinally {\n    fabric.close();\n}",
              "err": {
                "message": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443",
                "estack": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:57:26)",
                "diff": null
              },
              "uuid": "6d79144b-2035-474b-928a-7cfe58200f4d",
              "parentUUID": "9593b63b-9392-45e3-8767-220ab9fb01d1",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "14c3f59e-ee39-44b7-9f70-cc80ea4ed05d",
              "title": "fabric.query",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/23-c8ql-queries-stream.js",
              "file": "/lib/async/test/23-c8ql-queries-stream.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns a cursor for the query result",
                  "fullTitle": "C8QL Stream queries fabric.query returns a cursor for the query result",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "fabric\n    .query(\"RETURN 23\", {}, { options: { stream: true } })\n    .then(cursor => {\n    chai_1.expect(cursor).to.be.an.instanceof(cursor_1.ArrayCursor);\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "ce255c68-930e-4830-bcc1-5738c2d1b846",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "supports bindVars",
                  "fullTitle": "C8QL Stream queries fabric.query supports bindVars",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "fabric\n    .query(\"RETURN @x\", { x: 5 }, { options: { stream: true } })\n    .then(cursor => cursor.next())\n    .then(value => {\n    chai_1.expect(value).to.equal(5);\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "bbfcd284-e2fe-4215-9a61-72ffb23ac328",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "supports options",
                  "fullTitle": "C8QL Stream queries fabric.query supports options",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "fabric\n    .query(\"FOR x IN 1..10 RETURN x\", {}, {\n    batchSize: 2,\n    count: true\n})\n    .then(cursor => {\n    let count = cursor.count;\n    chai_1.expect(count).to.equal(10);\n    chai_1.expect(cursor._hasMore).to.equal(true);\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "b02c601b-c51c-4cc3-8e75-59451c080480",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "supports compact queries with options",
                  "fullTitle": "C8QL Stream queries fabric.query supports compact queries with options",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let query = {\n    query: \"FOR x IN RANGE(1, @max) RETURN x\",\n    bindVars: { max: 10 }\n};\nfabric\n    .query(query, { batchSize: 2, count: true })\n    .then(cursor => {\n    chai_1.expect(cursor.count).to.equal(10);\n    chai_1.expect(cursor._hasMore).to.equal(true);\n    done();\n})\n    .catch(done);",
                  "err": {},
                  "uuid": "cebc9073-f7c5-4829-ac1f-ccefc46b84e6",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "ce255c68-930e-4830-bcc1-5738c2d1b846",
                "bbfcd284-e2fe-4215-9a61-72ffb23ac328",
                "b02c601b-c51c-4cc3-8e75-59451c080480",
                "cebc9073-f7c5-4829-ac1f-ccefc46b84e6"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "b5067874-28dc-4e9b-846d-d22c6b4f67ec",
              "title": "with some data",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/23-c8ql-queries-stream.js",
              "file": "/lib/async/test/23-c8ql-queries-stream.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can access large collection in parallel",
                  "fullTitle": "C8QL Stream queries with some data can access large collection in parallel",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "af86109d-468b-4bad-9f3c-457dd64304f7",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can do writes and reads",
                  "fullTitle": "C8QL Stream queries with some data can do writes and reads",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "57dc39d1-a8ae-4790-9f18-fafeffc6f71d",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "af86109d-468b-4bad-9f3c-457dd64304f7",
                "57dc39d1-a8ae-4790-9f18-fafeffc6f71d"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000000
        },
        {
          "uuid": "5b305bad-f26b-4ecc-ae3a-7a9b3d09bab2",
          "title": "Manipulating streams",
          "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/28-manipulating-streams.js",
          "file": "/lib/async/test/28-manipulating-streams.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Manipulating streams \"before all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "fabric = new jsC8_1.Fabric({\n    url: testUrl,\n    c8Version: Number(process.env.C8_VERSION || 30400)\n});\nawait fabric.login(\"guest@macrometa.io\", \"guest\");\nfabric.useTenant(\"guest\");",
              "err": {
                "message": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443",
                "estack": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:57:26)",
                "diff": null
              },
              "uuid": "2fd3aa12-ccf9-42c6-99c4-1c3b52890f0f",
              "parentUUID": "5b305bad-f26b-4ecc-ae3a-7a9b3d09bab2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "Manipulating streams \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "fabric.close();",
              "err": {},
              "uuid": "75f01ffa-c56a-4012-a49e-57ba8a8e50f2",
              "parentUUID": "5b305bad-f26b-4ecc-ae3a-7a9b3d09bab2",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "b4ffb12a-6f9e-4826-b9da-133e780c14ad",
              "title": "fabric.stream",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/28-manipulating-streams.js",
              "file": "/lib/async/test/28-manipulating-streams.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns a new Stream instance",
                  "fullTitle": "Manipulating streams fabric.stream returns a new Stream instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(fabric.stream(\"testStream\", true)).to.be.instanceof(stream_1.Stream);",
                  "err": {},
                  "uuid": "efc21afe-b6ac-4541-8104-26d701983b90",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "gets all streams",
                  "fullTitle": "Manipulating streams fabric.stream gets all streams",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await fabric.getStreams();\nchai_1.expect(response.error).to.be.false;",
                  "err": {},
                  "uuid": "7a2c5f73-fe4a-4092-829b-a2a4ebb3e8f6",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "clears backlog",
                  "fullTitle": "Manipulating streams fabric.stream clears backlog",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await fabric.clearBacklog();\nchai_1.expect(response.error).to.be.false;",
                  "err": {},
                  "uuid": "0743ac4a-7737-4d3b-87b8-514b6ab8ea35",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "clears subscription backlog",
                  "fullTitle": "Manipulating streams fabric.stream clears subscription backlog",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "09f1321a-5b19-4a1c-9421-778fa1e3f7eb",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "unsubscribes to a subscription",
                  "fullTitle": "Manipulating streams fabric.stream unsubscribes to a subscription",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "19dae984-078d-45b5-8250-e3e5c993ccc7",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "09f1321a-5b19-4a1c-9421-778fa1e3f7eb",
                "19dae984-078d-45b5-8250-e3e5c993ccc7"
              ],
              "skipped": [
                "efc21afe-b6ac-4541-8104-26d701983b90",
                "7a2c5f73-fe4a-4092-829b-a2a4ebb3e8f6",
                "0743ac4a-7737-4d3b-87b8-514b6ab8ea35"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 50000
            },
            {
              "uuid": "aa4c08c0-85df-45fc-8bb5-1170936567b4",
              "title": "stream.create",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/28-manipulating-streams.js",
              "file": "/lib/async/test/28-manipulating-streams.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "33c54b36-81e0-44da-98dc-ea8f495d96f7",
                  "title": "persistent",
                  "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/28-manipulating-streams.js",
                  "file": "/lib/async/test/28-manipulating-streams.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "creates a persistent local stream",
                      "fullTitle": "Manipulating streams stream.create persistent creates a persistent local stream",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const name = `stream${Date.now()}`;\nstream = fabric.stream(name, true);\nconst response = await stream.createStream();\nchai_1.expect(response.error).to.be.false;",
                      "err": {},
                      "uuid": "d8dedc6f-f5bc-4890-92c6-08d210cd589f",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "creates a persistent global stream",
                      "fullTitle": "Manipulating streams stream.create persistent creates a persistent global stream",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const name = `stream${Date.now()}`;\nstream = fabric.stream(name, false);\nconst response = await stream.createStream();\nchai_1.expect(response.error).to.be.false;",
                      "err": {},
                      "uuid": "de4a7a24-dc36-4fd4-b8cd-cb7e05f948b9",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "d8dedc6f-f5bc-4890-92c6-08d210cd589f",
                    "de4a7a24-dc36-4fd4-b8cd-cb7e05f948b9"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 50000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 50000
            },
            {
              "uuid": "cb21b1f1-eef2-4897-b1cd-189e080e65b8",
              "title": "stream.manipulate",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/28-manipulating-streams.js",
              "file": "/lib/async/test/28-manipulating-streams.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook",
                  "fullTitle": "Manipulating streams stream.manipulate \"before all\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stream = fabric.stream(`testStream${Date.now()}`, false);\nawait stream.createStream();",
                  "err": {},
                  "uuid": "58e7e4af-efb6-4194-892c-4c47d927ca20",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                },
                {
                  "title": "\"before all\" hook",
                  "fullTitle": "Manipulating streams stream.manipulate \"before all\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await fabric.getLocalEdgeLocation();\ndcName = response.tags.url;",
                  "err": {},
                  "uuid": "e923b2c9-ef61-4602-a962-28269e3d0391",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook",
                  "fullTitle": "Manipulating streams stream.manipulate \"after all\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "if (consumer)\n    consumer.close();\nif (producer)\n    producer.close();",
                  "err": {},
                  "uuid": "7652fc34-63eb-4500-944d-4c357f26e43c",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "stream.expireMessagesOnAllSubscriptions",
                  "fullTitle": "Manipulating streams stream.manipulate stream.expireMessagesOnAllSubscriptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "79d4c894-19f6-4e29-95d3-b553a038fce6",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "20e092a4-2d72-4639-b306-895a72a21d2f",
                  "title": "stream.getBacklog",
                  "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/28-manipulating-streams.js",
                  "file": "/lib/async/test/28-manipulating-streams.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "gets estimated backlog for offline stream",
                      "fullTitle": "Manipulating streams stream.manipulate stream.getBacklog gets estimated backlog for offline stream",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "setTimeout(async function () {\n    const response = await stream.backlog();\n    chai_1.expect(response.error).to.be.false;\n}, 5000);",
                      "err": {},
                      "uuid": "bdd7b9fc-f95d-48ae-a351-a650cc0dd6ea",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "bdd7b9fc-f95d-48ae-a351-a650cc0dd6ea"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 50000
                },
                {
                  "uuid": "41e7ed6c-5494-4f53-83bc-46b758c7fff7",
                  "title": "stream.getStreamStatistics",
                  "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/28-manipulating-streams.js",
                  "file": "/lib/async/test/28-manipulating-streams.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "gets the stream statistics",
                      "fullTitle": "Manipulating streams stream.manipulate stream.getStreamStatistics gets the stream statistics",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const response = await stream.getStreamStatistics();\nchai_1.expect(response.error).to.be.false;",
                      "err": {},
                      "uuid": "0ec762cd-d2a2-4c7a-8a49-c7ea362f75de",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "0ec762cd-d2a2-4c7a-8a49-c7ea362f75de"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 50000
                },
                {
                  "uuid": "dd1b0321-5a9b-41d6-af4b-7d30bc3b0183",
                  "title": "stream.subscriptions",
                  "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/28-manipulating-streams.js",
                  "file": "/lib/async/test/28-manipulating-streams.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "stream.resetSubscriptionToPosition",
                      "fullTitle": "Manipulating streams stream.manipulate stream.subscriptions stream.resetSubscriptionToPosition",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "985005d7-eaa8-4e4d-8b17-3a7d5c0caaff",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [
                    {
                      "uuid": "292fa51b-936e-4913-95aa-bd8f02aaa895",
                      "title": "stream.terminate",
                      "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/28-manipulating-streams.js",
                      "file": "/lib/async/test/28-manipulating-streams.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [],
                      "suites": [
                        {
                          "uuid": "1b0db08f-0a8a-4b38-9f7c-2eaee699a76e",
                          "title": "persistent",
                          "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/28-manipulating-streams.js",
                          "file": "/lib/async/test/28-manipulating-streams.js",
                          "beforeHooks": [],
                          "afterHooks": [],
                          "tests": [],
                          "suites": [
                            {
                              "uuid": "07389ad3-e109-4261-aa72-43508007c47b",
                              "title": "local",
                              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/28-manipulating-streams.js",
                              "file": "/lib/async/test/28-manipulating-streams.js",
                              "beforeHooks": [
                                {
                                  "title": "\"before each\" hook",
                                  "fullTitle": "Manipulating streams stream.manipulate stream.subscriptions stream.terminate persistent local \"before each\" hook",
                                  "timedOut": false,
                                  "duration": 0,
                                  "state": null,
                                  "speed": null,
                                  "pass": false,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "const streamName = `stream${Date.now()}`;\nstream = fabric.stream(streamName, true);\nawait stream.createStream();",
                                  "err": {},
                                  "uuid": "1cdbd99f-dc84-4da0-96f2-8cc71d861450",
                                  "parentUUID": null,
                                  "isHook": true,
                                  "skipped": false
                                }
                              ],
                              "afterHooks": [],
                              "tests": [
                                {
                                  "title": "terminates persistent local stream",
                                  "fullTitle": "Manipulating streams stream.manipulate stream.subscriptions stream.terminate persistent local terminates persistent local stream",
                                  "timedOut": false,
                                  "duration": 0,
                                  "state": null,
                                  "speed": null,
                                  "pass": false,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "setTimeout(async function () {\n    const response = await stream.terminateStream();\n    chai_1.expect(response.error).to.be.false;\n}, 5000);",
                                  "err": {},
                                  "uuid": "94718558-7aca-4783-8cbc-687ec70cc9c0",
                                  "parentUUID": null,
                                  "isHook": false,
                                  "skipped": true
                                }
                              ],
                              "suites": [],
                              "passes": [],
                              "failures": [],
                              "pending": [],
                              "skipped": [
                                "94718558-7aca-4783-8cbc-687ec70cc9c0"
                              ],
                              "duration": 0,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 50000
                            },
                            {
                              "uuid": "0e8d861f-a19d-4e16-9a9c-6896874974a3",
                              "title": "global",
                              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/28-manipulating-streams.js",
                              "file": "/lib/async/test/28-manipulating-streams.js",
                              "beforeHooks": [
                                {
                                  "title": "\"before each\" hook",
                                  "fullTitle": "Manipulating streams stream.manipulate stream.subscriptions stream.terminate persistent global \"before each\" hook",
                                  "timedOut": false,
                                  "duration": 0,
                                  "state": null,
                                  "speed": null,
                                  "pass": false,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "const streamName = `stream${Date.now()}`;\nstream = fabric.stream(streamName, false);\nawait stream.createStream();",
                                  "err": {},
                                  "uuid": "9ebad116-e2a2-4654-8a67-eeac311b3edc",
                                  "parentUUID": null,
                                  "isHook": true,
                                  "skipped": false
                                }
                              ],
                              "afterHooks": [],
                              "tests": [
                                {
                                  "title": "terminates persistent global stream",
                                  "fullTitle": "Manipulating streams stream.manipulate stream.subscriptions stream.terminate persistent global terminates persistent global stream",
                                  "timedOut": false,
                                  "duration": 0,
                                  "state": null,
                                  "speed": null,
                                  "pass": false,
                                  "fail": false,
                                  "pending": false,
                                  "context": null,
                                  "code": "setTimeout(async function () {\n    const response = await stream.terminateStream();\n    chai_1.expect(response.error).to.be.false;\n}, 5000);",
                                  "err": {},
                                  "uuid": "e2870938-3aa4-41e5-a4ff-4b2a8b90ef3d",
                                  "parentUUID": null,
                                  "isHook": false,
                                  "skipped": true
                                }
                              ],
                              "suites": [],
                              "passes": [],
                              "failures": [],
                              "pending": [],
                              "skipped": [
                                "e2870938-3aa4-41e5-a4ff-4b2a8b90ef3d"
                              ],
                              "duration": 0,
                              "root": false,
                              "rootEmpty": false,
                              "_timeout": 50000
                            }
                          ],
                          "passes": [],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 0,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 50000
                        }
                      ],
                      "passes": [],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 50000
                    },
                    {
                      "uuid": "82333ad2-de09-4148-9062-1366fa8f6731",
                      "title": "stream.websocket",
                      "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/28-manipulating-streams.js",
                      "file": "/lib/async/test/28-manipulating-streams.js",
                      "beforeHooks": [
                        {
                          "title": "\"before all\" hook",
                          "fullTitle": "Manipulating streams stream.manipulate stream.subscriptions stream.websocket \"before all\" hook",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const response = await fabric.getLocalEdgeLocation();\ndcName = response.tags.url;",
                          "err": {},
                          "uuid": "30eb85aa-ec9e-4f51-96a4-723394cf8689",
                          "parentUUID": null,
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [
                        {
                          "title": "\"after all\" hook",
                          "fullTitle": "Manipulating streams stream.manipulate stream.subscriptions stream.websocket \"after all\" hook",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "if (consumer)\n    consumer.close();\nif (producer)\n    producer.close();",
                          "err": {},
                          "uuid": "1cc4df73-7ed4-4e9e-b58b-39f9bf98704e",
                          "parentUUID": null,
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "tests": [
                        {
                          "title": "gets data in consumer when sent by producer",
                          "fullTitle": "Manipulating streams stream.manipulate stream.subscriptions stream.websocket gets data in consumer when sent by producer",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "function callback(msg) {\n    const parsedMsg = JSON.parse(msg);\n    const { payload } = parsedMsg;\n    chai_1.expect(payload).to.equal(\"test\");\n    done();\n}\nconsumer = stream.consumer(`streamSubscription${Date.now()}`, dcName);\nproducer = stream.producer(dcName);\nconsumer.on('open', () => {\n    producer.send(JSON.stringify({ payload: 'test' }));\n});\nconsumer.on('message', callback);",
                          "err": {},
                          "uuid": "898230a6-9801-4225-92f6-20bf79750ad6",
                          "parentUUID": null,
                          "isHook": false,
                          "skipped": true
                        }
                      ],
                      "suites": [],
                      "passes": [],
                      "failures": [],
                      "pending": [],
                      "skipped": [
                        "898230a6-9801-4225-92f6-20bf79750ad6"
                      ],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 50000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [
                    "985005d7-eaa8-4e4d-8b17-3a7d5c0caaff"
                  ],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 50000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [
                "79d4c894-19f6-4e29-95d3-b553a038fce6"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 50000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 50000
        },
        {
          "uuid": "876ffd24-65e3-4fcc-8b2b-dd0228f32c70",
          "title": "User Management",
          "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/30-user-management.js",
          "file": "/lib/async/test/30-user-management.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "User Management \"before all\" hook",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "fabric = new jsC8_1.Fabric({\n    url: testUrl,\n    c8Version: Number(process.env.C8_VERSION || 30400)\n});\nawait fabric.login(\"guest@macrometa.io\", \"guest\");\nfabric.useTenant(\"guest\");\nconst response = await fabric.getAllEdgeLocations();\ndcList = helper_1.getDCListString(response);",
              "err": {
                "message": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443",
                "estack": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:57:26)",
                "diff": null
              },
              "uuid": "7e6119be-0e0e-4ac7-bb85-5c5936c53c1e",
              "parentUUID": "876ffd24-65e3-4fcc-8b2b-dd0228f32c70",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "User Management \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "fabric.close();",
              "err": {},
              "uuid": "b51a3f01-a4c1-493b-b578-1b724f51ec68",
              "parentUUID": "876ffd24-65e3-4fcc-8b2b-dd0228f32c70",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "46d61586-7a10-402b-877e-fabc817842bc",
              "title": "fabric.user",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/30-user-management.js",
              "file": "/lib/async/test/30-user-management.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "creates a new user instance",
                  "fullTitle": "User Management fabric.user creates a new user instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(fabric.user(\"testUser\", \"testUser@test.com\")).to.be.instanceof(user_1.default);",
                  "err": {},
                  "uuid": "657deadf-38b2-454d-8f8d-af11d7c44e88",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "657deadf-38b2-454d-8f8d-af11d7c44e88"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "69329ecb-92a8-47f2-8e53-325acd159f2c",
              "title": "user.create",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/30-user-management.js",
              "file": "/lib/async/test/30-user-management.js",
              "beforeHooks": [],
              "afterHooks": [
                {
                  "title": "\"after all\" hook",
                  "fullTitle": "User Management user.create \"after all\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await user.deleteUser();",
                  "err": {},
                  "uuid": "2b29e0ab-638f-4728-a1c9-37f72bd64733",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "creates a user",
                  "fullTitle": "User Management user.create creates a user",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userName = `user${Date.now()}`;\nconst userEmail = `${userName}@test.com`;\nuser = fabric.user(userName, userEmail);\nconst response = await user.createUser(\"testPass\");\nchai_1.expect(response.error).to.be.false;",
                  "err": {},
                  "uuid": "ecdebba6-18c1-477c-9334-5b8f58e38f16",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "ecdebba6-18c1-477c-9334-5b8f58e38f16"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "7af04ace-8586-4bc8-8be5-e22f37b80c37",
              "title": "fabric.getAllUsers",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/30-user-management.js",
              "file": "/lib/async/test/30-user-management.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Lists all users",
                  "fullTitle": "User Management fabric.getAllUsers Lists all users",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await fabric.getAllUsers();\nchai_1.expect(response.error).to.be.false;",
                  "err": {},
                  "uuid": "90ea8d79-cd0c-4bf4-b82a-05680b8e4337",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "90ea8d79-cd0c-4bf4-b82a-05680b8e4337"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "aa44c732-c139-486a-8f6f-b54dfb306105",
              "title": "user.crud_operations",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/30-user-management.js",
              "file": "/lib/async/test/30-user-management.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "User Management user.crud_operations \"before each\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userName = `user${Date.now()}`;\nconst userEmail = `${userName}@test.com`;\nuser = fabric.user(userName, userEmail);\nawait user.createUser(\"testPass\");",
                  "err": {},
                  "uuid": "259d839c-5c4d-4871-885f-c59b82a2d43d",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook",
                  "fullTitle": "User Management user.crud_operations \"after each\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "try {\n    await user.deleteUser();\n}\ncatch (error) { }",
                  "err": {},
                  "uuid": "2b52f076-5f1c-4a17-8973-d66500303f99",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [],
              "suites": [
                {
                  "uuid": "b64ec5ef-dcb1-4092-99c0-5cb4b3f0af65",
                  "title": "user.deleteUser",
                  "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/30-user-management.js",
                  "file": "/lib/async/test/30-user-management.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Deletes a user",
                      "fullTitle": "User Management user.crud_operations user.deleteUser Deletes a user",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const response = await user.deleteUser();\nchai_1.expect(response.error).to.be.false;",
                      "err": {},
                      "uuid": "0cfc4f41-92ef-40e5-b480-affa66f19403",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "0cfc4f41-92ef-40e5-b480-affa66f19403"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 20000
                },
                {
                  "uuid": "2afbfebc-e6c2-4b35-a6c6-f78f5686aa21",
                  "title": "user.getUserDetails",
                  "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/30-user-management.js",
                  "file": "/lib/async/test/30-user-management.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Fetches a user",
                      "fullTitle": "User Management user.crud_operations user.getUserDetails Fetches a user",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const response = await user.getUserDeatils();\nchai_1.expect(response.error).to.be.false;",
                      "err": {},
                      "uuid": "7fda7d6f-c185-4557-a611-bf40534694c7",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "7fda7d6f-c185-4557-a611-bf40534694c7"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 20000
                },
                {
                  "uuid": "330acfa6-63d9-4f9e-a9fb-8ee57cd360e1",
                  "title": "user.modifyUser",
                  "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/30-user-management.js",
                  "file": "/lib/async/test/30-user-management.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Modifies a user",
                      "fullTitle": "User Management user.crud_operations user.modifyUser Modifies a user",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const response = await user.modifyUser({\n    active: false\n});\nchai_1.expect(response.error).to.be.false;\nchai_1.expect(response.active).to.be.false;",
                      "err": {},
                      "uuid": "9b3c3a37-b26d-4665-8fb9-dba4e5e52cb7",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "9b3c3a37-b26d-4665-8fb9-dba4e5e52cb7"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 20000
                },
                {
                  "uuid": "bed26f06-f64b-45a8-a55d-684ed15493aa",
                  "title": "user.replaceUser",
                  "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/30-user-management.js",
                  "file": "/lib/async/test/30-user-management.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Modifies a user",
                      "fullTitle": "User Management user.crud_operations user.replaceUser Modifies a user",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const response = await user.replaceUser({\n    passwd: \"test_passwordddd\"\n});\nchai_1.expect(response.error).to.be.false;",
                      "err": {},
                      "uuid": "40811b3a-9c88-4ffd-ae67-c2acedba8fc3",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "40811b3a-9c88-4ffd-ae67-c2acedba8fc3"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 20000
                },
                {
                  "uuid": "2292085d-ed4b-439f-acaf-93e1003314f8",
                  "title": "User.FabricAccessOperations",
                  "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/30-user-management.js",
                  "file": "/lib/async/test/30-user-management.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook",
                      "fullTitle": "User Management user.crud_operations User.FabricAccessOperations \"before each\" hook",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await fabric.createFabric(testFabricName, [{ username: user.user }], {\n    dcList: dcList\n});\n// fabric.useFabric(testFabricName);",
                      "err": {},
                      "uuid": "52062830-513f-4b03-8bf9-7cd8014deead",
                      "parentUUID": null,
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [
                    {
                      "title": "\"after each\" hook",
                      "fullTitle": "User Management user.crud_operations User.FabricAccessOperations \"after each\" hook",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "fabric.useFabric(\"_system\");\nawait fabric.dropFabric(testFabricName);",
                      "err": {},
                      "uuid": "dd49a8e9-23fb-4328-9801-349ad81daca2",
                      "parentUUID": null,
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "tests": [
                    {
                      "title": "Lists the accessible databases and their permissions ",
                      "fullTitle": "User Management user.crud_operations User.FabricAccessOperations Lists the accessible databases and their permissions ",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const response = await user.getAllDatabases();\nchai_1.expect(response.error).to.be.false;\nchai_1.expect(response.result[testFabricName]).to.exist;\nchai_1.expect(response.result[testFabricName].collections).not.exist;",
                      "err": {},
                      "uuid": "78251416-c453-4e58-90a2-66ab920dbfec",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "Lists the accessible databases and their permissions with all the collections",
                      "fullTitle": "User Management user.crud_operations User.FabricAccessOperations Lists the accessible databases and their permissions with all the collections",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const response = await user.getAllDatabases(true);\nchai_1.expect(response.error).to.be.false;\nchai_1.expect(response.result[testFabricName]).to.exist;\nchai_1.expect(response.result[testFabricName].collections).to.exist;",
                      "err": {},
                      "uuid": "4af7ea43-e321-4ddf-985c-734da451720d",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "Gets the access level of a database ",
                      "fullTitle": "User Management user.crud_operations User.FabricAccessOperations Gets the access level of a database ",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const response = await user.getDatabaseAccessLevel(testFabricName);\nchai_1.expect(response.error).to.be.false;\nchai_1.expect(response.result).to.be.oneOf([\"rw\", \"ro\", \"none\"]);",
                      "err": {},
                      "uuid": "27f57260-b546-4811-87b6-9faec7054dcd",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "Gets the access level of a collection in a database ",
                      "fullTitle": "User Management user.crud_operations User.FabricAccessOperations Gets the access level of a collection in a database ",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const collectionName = `coll${Date.now()}`;\nawait fabric.collection(collectionName).create();\nconst response = await user.getCollectionAccessLevel(testFabricName, collectionName);\nchai_1.expect(response.error).to.be.false;",
                      "err": {},
                      "uuid": "252de943-acb6-465c-9a71-75dfce05837f",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "Clears the access level of a database ",
                      "fullTitle": "User Management user.crud_operations User.FabricAccessOperations Clears the access level of a database ",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const response = await user.clearDatabaseAccessLevel(testFabricName);\nchai_1.expect(response.error).to.be.false;\nchai_1.expect(response.code).eq(202);",
                      "err": {},
                      "uuid": "e15dacbe-37e5-4b6b-b03d-81569234de33",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "Clears the access level of a collection in a database ",
                      "fullTitle": "User Management user.crud_operations User.FabricAccessOperations Clears the access level of a collection in a database ",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "4a938297-6bb6-4bca-9456-ddc3be44e058",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Sets the access level of a collection in a database ",
                      "fullTitle": "User Management user.crud_operations User.FabricAccessOperations Sets the access level of a collection in a database ",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "9ff0947b-a600-4c80-82c4-18726c79b608",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Sets the access level of a database",
                      "fullTitle": "User Management user.crud_operations User.FabricAccessOperations Sets the access level of a database",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const response = await user.setDatabaseAccessLevel(testFabricName, \"ro\");\nchai_1.expect(response.error).to.be.false;\nchai_1.expect(response.code).eq(200);\nchai_1.expect(response[`${testFabricName}`]).eq(\"ro\");",
                      "err": {},
                      "uuid": "41e8d3cd-e946-4a1f-ae57-c379dfa4c5e4",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [
                    "4a938297-6bb6-4bca-9456-ddc3be44e058",
                    "9ff0947b-a600-4c80-82c4-18726c79b608"
                  ],
                  "skipped": [
                    "78251416-c453-4e58-90a2-66ab920dbfec",
                    "4af7ea43-e321-4ddf-985c-734da451720d",
                    "27f57260-b546-4811-87b6-9faec7054dcd",
                    "252de943-acb6-465c-9a71-75dfce05837f",
                    "e15dacbe-37e5-4b6b-b03d-81569234de33",
                    "41e8d3cd-e946-4a1f-ae57-c379dfa4c5e4"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 20000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "c23d6800-2507-4b97-a792-f2c51ffad05b",
          "title": "manipulating restql",
          "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/31-restql.js",
          "file": "/lib/async/test/31-restql.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "manipulating restql \"before all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "fabric = new jsC8_1.Fabric({\n    url: testUrl,\n    c8Version: Number(process.env.C8_VERSION || 30400)\n});\nawait fabric.login(\"guest@macrometa.io\", \"guest\");\nfabric.useTenant(\"guest\");",
              "err": {
                "message": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443",
                "estack": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:57:26)",
                "diff": null
              },
              "uuid": "68581c3e-d530-42d6-b5e0-3a129b9f5a88",
              "parentUUID": "c23d6800-2507-4b97-a792-f2c51ffad05b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "manipulating restql \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "fabric.close();",
              "err": {},
              "uuid": "4125dddd-be4d-4900-848e-187e29d4bb66",
              "parentUUID": "c23d6800-2507-4b97-a792-f2c51ffad05b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "ae1dee4c-4f32-461c-9bea-42182ca93823",
              "title": "fabric.saveQuery",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/31-restql.js",
              "file": "/lib/async/test/31-restql.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should save a query",
                  "fullTitle": "manipulating restql fabric.saveQuery should save a query",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const queryName = \"testQuery\";\nconst response = await fabric.saveQuery(queryName, {}, \"for coll in _collections return coll\");\nchai_1.expect(response.error).to.be.false;\nchai_1.expect(response.result.name).to.equal(queryName);",
                  "err": {},
                  "uuid": "3e2ebfde-1fc1-46cc-92c5-66fd3f7982e9",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "3e2ebfde-1fc1-46cc-92c5-66fd3f7982e9"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 50000
            },
            {
              "uuid": "36c29c62-dfc2-4d6a-bb0d-d910214bb866",
              "title": "fabric.listSavedQueries",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/31-restql.js",
              "file": "/lib/async/test/31-restql.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should make a successful API call",
                  "fullTitle": "manipulating restql fabric.listSavedQueries should make a successful API call",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await fabric.listSavedQueries();\nchai_1.expect(response.error).to.be.false;\nchai_1.expect(response.result.length).to.be.at.least(1);",
                  "err": {},
                  "uuid": "7150ba8b-0312-4f0a-a5f8-bf6801790726",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "7150ba8b-0312-4f0a-a5f8-bf6801790726"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 50000
            },
            {
              "uuid": "51b17c46-c734-40d0-8dab-26951389dfd0",
              "title": "fabric.executeSavedQuery",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/31-restql.js",
              "file": "/lib/async/test/31-restql.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook",
                  "fullTitle": "manipulating restql fabric.executeSavedQuery \"before all\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "response = await fabric.executeSavedQuery(queryName, {});",
                  "err": {},
                  "uuid": "8401d412-efbc-4b41-a35a-c894625e7100",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should execute a saved query",
                  "fullTitle": "manipulating restql fabric.executeSavedQuery should execute a saved query",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(response.error).to.be.false;",
                  "err": {},
                  "uuid": "88223d4b-1387-4fa6-b850-2efb370ae240",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "88223d4b-1387-4fa6-b850-2efb370ae240"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 50000
            },
            {
              "uuid": "b176fe98-4347-415a-b27d-57e748f5bd4c",
              "title": "fabric.deleteSavedQuery",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/31-restql.js",
              "file": "/lib/async/test/31-restql.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should delete a saved query",
                  "fullTitle": "manipulating restql fabric.deleteSavedQuery should delete a saved query",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "response = await fabric.deleteSavedQuery(queryName);\nchai_1.expect(response.error).to.be.false;",
                  "err": {},
                  "uuid": "c6315581-0475-4641-8126-3e0a7d4180ea",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "c6315581-0475-4641-8126-3e0a7d4180ea"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 50000
            },
            {
              "uuid": "10549fdc-7797-45f6-b879-f1a5509304d3",
              "title": "fabric.createRestqlCursor",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/31-restql.js",
              "file": "/lib/async/test/31-restql.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should delete a saved query",
                  "fullTitle": "manipulating restql fabric.createRestqlCursor should delete a saved query",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "5580a700-ea92-4718-bd6d-5cbb0a5d5859",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "5580a700-ea92-4718-bd6d-5cbb0a5d5859"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 50000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 50000
        },
        {
          "uuid": "a6d1b97d-97fe-4874-9176-f2da6a8549f1",
          "title": " StreamApps ",
          "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/32-streamapps.js",
          "file": "/lib/async/test/32-streamapps.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": " StreamApps  \"before all\" hook",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "fabric = new jsC8_1.Fabric({\n    url: testUrl,\n    c8Version: Number(process.env.C8_VERSION || 30400)\n});\nawait fabric.login(\"guest@macrometa.io\", \"guest\");\nfabric.useTenant(\"guest\");",
              "err": {
                "message": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443",
                "estack": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:57:26)",
                "diff": null
              },
              "uuid": "a412a84e-258c-453d-84df-a29a2c328718",
              "parentUUID": "a6d1b97d-97fe-4874-9176-f2da6a8549f1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": " StreamApps  \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "fabric.close();",
              "err": {},
              "uuid": "20dee2de-94b3-4377-a45c-e2cec8fc12a4",
              "parentUUID": "a6d1b97d-97fe-4874-9176-f2da6a8549f1",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "24e9e60a-5f69-46cd-9451-e1ed7b815300",
              "title": "fabric.createStreamApp",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/32-streamapps.js",
              "file": "/lib/async/test/32-streamapps.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should create a Stream Apllication",
                  "fullTitle": " StreamApps  fabric.createStreamApp Should create a Stream Apllication",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await fabric.getAllEdgeLocations();\nlet dcListAll = helper_1.getDCListString(response);\nlet dcList = dcListAll.split(\",\");\nlet appDefinition = `@App:name('Sample-Cargo-App')\n    -- Stream\n    define stream srcCargoStream (weight int);\n    -- Table\n    define table destCargoTable (weight int, totalWeight long);\n    -- Data Processing\n    @info(name='Query')\n    select weight, sum(weight) as totalWeight\n    from srcCargoStream\n    insert into destCargoTable;`;\nlet resp = await fabric.createStreamApp(dcList, appDefinition);\nconsole.log(resp);\nchai_1.expect(resp.error).to.be.false;",
                  "err": {},
                  "uuid": "97d90de9-31b1-4fa4-8b1e-d3a974f9248f",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "97d90de9-31b1-4fa4-8b1e-d3a974f9248f"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "68c88365-d2cc-4c3d-b348-a0445e8cd2df",
              "title": "fabric.getAllStreamApps",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/32-streamapps.js",
              "file": "/lib/async/test/32-streamapps.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "get all stream apps",
                  "fullTitle": " StreamApps  fabric.getAllStreamApps get all stream apps",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await fabric.getAllStreamApps();\nchai_1.expect(response.error).to.be.false;",
                  "err": {},
                  "uuid": "a79f34b6-847c-4283-90ab-ee063149dd29",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "a79f34b6-847c-4283-90ab-ee063149dd29"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "0952bd73-1109-4927-86e3-31fe8027a1f8",
              "title": "fabric.validateStreamappDefinition",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/32-streamapps.js",
              "file": "/lib/async/test/32-streamapps.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "validate the streamapp definition",
                  "fullTitle": " StreamApps  fabric.validateStreamappDefinition validate the streamapp definition",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let appDefinition = `@App:name('Sample-Cargo-App')\n    -- Stream\n    define stream srcCargoStream (weight int);\n    -- Table\n    define table destCargoTable (weight int, totalWeight long);\n    -- Data Processing\n    @info(name='Query')\n    select weight, sum(weight) as totalWeight\n    from srcCargoStream\n    insert into destCargoTable;`;\nlet response = await fabric.validateStreamappDefinition(appDefinition);\nchai_1.expect(response.error).to.be.false;",
                  "err": {},
                  "uuid": "1dc9b04d-98da-43a3-aa5a-68fadbd903f4",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "1dc9b04d-98da-43a3-aa5a-68fadbd903f4"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "efb6c38f-822b-4dd1-9a0b-3416d115f8e7",
              "title": "fabric.getSampleStreamApps",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/32-streamapps.js",
              "file": "/lib/async/test/32-streamapps.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "get sample stream apps",
                  "fullTitle": " StreamApps  fabric.getSampleStreamApps get sample stream apps",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await fabric.getSampleStreamApps();\nchai_1.expect(response.error).to.be.false;",
                  "err": {},
                  "uuid": "02816d5d-0165-4e96-ae6c-9fca0b2829a1",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "02816d5d-0165-4e96-ae6c-9fca0b2829a1"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "cae09fa1-80bd-4dfa-8517-a254027ec5b4",
              "title": "streamapps.activateStreamApplication",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/32-streamapps.js",
              "file": "/lib/async/test/32-streamapps.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Activate a stream App",
                  "fullTitle": " StreamApps  streamapps.activateStreamApplication Activate a stream App",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const app = fabric.streamApp(\"Sample-Cargo-App\");\nlet response = await app.activateStreamApplication(true);\nchai_1.expect(response.error).to.be.false;",
                  "err": {},
                  "uuid": "d06d7490-88ee-4297-8a75-f28ce52f1190",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "d06d7490-88ee-4297-8a75-f28ce52f1190"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "641d8c21-714b-4d0b-9189-fdd1a05feac8",
              "title": "streamapps.retriveApplication",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/32-streamapps.js",
              "file": "/lib/async/test/32-streamapps.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Retrive a stream App",
                  "fullTitle": " StreamApps  streamapps.retriveApplication Retrive a stream App",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const app = fabric.streamApp(\"Sample-Cargo-App\");\nlet response = await app.retriveApplication();\nchai_1.expect(response.error).to.be.false;",
                  "err": {},
                  "uuid": "5a02958a-7e45-4596-8390-78a46b2f5648",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "5a02958a-7e45-4596-8390-78a46b2f5648"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "316d7d44-db69-43ad-a05b-5f0830a5d186",
              "title": "streamapps.updateApplication",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/32-streamapps.js",
              "file": "/lib/async/test/32-streamapps.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Update a stream App",
                  "fullTitle": " StreamApps  streamapps.updateApplication Update a stream App",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = await fabric.getAllEdgeLocations();\nlet dcListAll = helper_1.getDCListString(resp);\nlet dcList = dcListAll.split(\",\");\nlet appdef = `@App:name('Sample-Cargo-App')\n    -- Stream\n    define stream srcCargoStream (weight int);\n    -- Table\n    define table destCargoTable (weight int, totalWeight long);\n    -- Data Processing\n    @info(name='Query')\n    select weight, sum(weight) as totalWeight\n    from srcCargoStream\n    insert into destCargoTable;`;\nconst app = fabric.streamApp(\"Sample-Cargo-App\");\nlet response = await app.updateApplication(dcList, appdef);\nchai_1.expect(response.error).to.be.false;",
                  "err": {},
                  "uuid": "d4b6e89a-0765-475c-9c98-c6792ace990b",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "d4b6e89a-0765-475c-9c98-c6792ace990b"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "b5c33952-d538-44bd-ae9c-734a4bf93f45",
              "title": "streamapps.query",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/32-streamapps.js",
              "file": "/lib/async/test/32-streamapps.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "runs query",
                  "fullTitle": " StreamApps  streamapps.query runs query",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const app = fabric.streamApp(\"Sample-Cargo-App\");\nlet response = await app.query(\"select * from destCargoTable limit 3\");\nchai_1.expect(response.error).to.be.false;",
                  "err": {},
                  "uuid": "3c41f0cc-ba70-4fb0-82af-1d5f183b313c",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "3c41f0cc-ba70-4fb0-82af-1d5f183b313c"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "27b0b40b-7f64-4a8b-a8c7-9a239aff7969",
              "title": "streamapps.deleteApplication",
              "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/32-streamapps.js",
              "file": "/lib/async/test/32-streamapps.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Delete a stream App",
                  "fullTitle": " StreamApps  streamapps.deleteApplication Delete a stream App",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const app = fabric.streamApp(\"Sample-Cargo-App\");\nlet response = await app.deleteApplication();\nconsole.log(response);\nchai_1.expect(response.error).to.be.false;",
                  "err": {},
                  "uuid": "e5ca8a07-9ee4-4030-9413-801dd157bd40",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "e5ca8a07-9ee4-4030-9413-801dd157bd40"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "2ea7ad85-ed62-4619-9622-80f02ddd1b4f",
          "title": "validating new apis",
          "fullFile": "/Users/vikaspatel/Documents/companies/Macrometa/projects/jsC8/lib/async/test/33-c8client.js",
          "file": "/lib/async/test/33-c8client.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook for \"Validate api key\"",
              "fullTitle": "validating new apis \"before each\" hook for \"Validate api key\"",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "c8Client = new jsC8_1.C8Client({\n    url: testUrl,\n    c8Version: C8_VERSION\n});\nawait c8Client.login(\"guest@macrometa.io\", \"guest\");\nc8Client.useTenant(\"guest\");",
              "err": {
                "message": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443",
                "estack": "Error: getaddrinfo ENOTFOUND api-test.eng1.macrometa.io api-test.eng1.macrometa.io:443\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:57:26)",
                "diff": null
              },
              "uuid": "652526ec-2759-48a3-9836-74c9d576d07b",
              "parentUUID": "2ea7ad85-ed62-4619-9622-80f02ddd1b4f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook",
              "fullTitle": "validating new apis \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "c8Client.close();",
              "err": {},
              "uuid": "1e05ef27-b8db-46ba-b3be-0c02ea2208fd",
              "parentUUID": "2ea7ad85-ed62-4619-9622-80f02ddd1b4f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Validate api key",
              "fullTitle": "validating new apis Validate api key",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "c8Client.createCollection('ping_test')\n    .then((data) => {\n    chai_1.expect(data).to.have.property(\"name\", 'ping_test');\n});",
              "err": {},
              "uuid": "e9180fa8-f7d5-4924-bc3d-e841992c4ffc",
              "parentUUID": "2ea7ad85-ed62-4619-9622-80f02ddd1b4f",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "e9180fa8-f7d5-4924-bc3d-e841992c4ffc"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 60000
    }
  ],
  "meta": {
    "mocha": {
      "version": "5.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": {},
      "version": "4.1.0"
    }
  }
}